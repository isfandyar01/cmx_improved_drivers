
spi_cbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  00035a8c  2**0
                  CONTENTS
  4 .ARM          00000008  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e4  080048e4  00035a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00015a8c  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20015a8c  0801a378  00035a8c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200160a4  0801a378  000360a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00035a8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b1b  00000000  00000000  00035abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f8  00000000  00000000  000485d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0004aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  0004bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298db  00000000  00000000  0004cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127db  00000000  00000000  00076693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb05e  00000000  00000000  00088e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  00183f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20015a8c 	.word	0x20015a8c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004870 	.word	0x08004870

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20015a90 	.word	0x20015a90
 80001e8:	08004870 	.word	0x08004870

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <CBUS_BUSY>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT,uint8_t addr);



static inline FlagStatus CBUS_BUSY(SPI_TypeDef *SPI_PORT) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 7)) ? SET : RESET;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>:

static inline FlagStatus CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 0)) ? SET : RESET;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf14      	ite	ne
 800052a:	2301      	movne	r3, #1
 800052c:	2300      	moveq	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <CBUS_SendFrame>:
}
*/
uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT);

static inline void CBUS_SendFrame(SPI_TypeDef *SPI_PORT, uint8_t tx_data)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
	*((volatile uint8_t*) &(SPI_PORT->DR)) =SSP_DR_BITMASK(tx_data); //(uint16_t*) *((volatile uint8_t*) &
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	330c      	adds	r3, #12
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	701a      	strb	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <CBUS_TX_BUFFER_EMPTY_CHECK>:





static inline FlagStatus CBUS_TX_BUFFER_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 1)) ? SET : RESET;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <swap_uint16>:


static inline uint16_t swap_uint16( uint16_t val )
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
    return (val << 8) | (val >> 8 );
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	b21a      	sxth	r2, r3
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21b      	sxth	r3, r3
 800059e:	b29b      	uxth	r3, r3
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <enable_clock_gpio_spi>:
 *      Author: Isfandyar Qureshi
 */
#include "cbus.h"

//working
void enable_clock_gpio_spi() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN; //enabled G clocks
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ba:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI3EN; // enabled SPI3 clock;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <enable_clock_gpio_spi+0x28>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <set_cbus_pins>:
//working
void set_cbus_pins() {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

	// chip select PG0 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE0_0;
 80005dc:	4b59      	ldr	r3, [pc, #356]	; (8000744 <set_cbus_pins+0x16c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a58      	ldr	r2, [pc, #352]	; (8000744 <set_cbus_pins+0x16c>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE0_1);
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <set_cbus_pins+0x16c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a55      	ldr	r2, [pc, #340]	; (8000744 <set_cbus_pins+0x16c>)
 80005ee:	f023 0302 	bic.w	r3, r3, #2
 80005f2:	6013      	str	r3, [r2, #0]

	GPIOG->PUPDR |= GPIO_PUPDR_PUPD0_1;
 80005f4:	4b53      	ldr	r3, [pc, #332]	; (8000744 <set_cbus_pins+0x16c>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a52      	ldr	r2, [pc, #328]	; (8000744 <set_cbus_pins+0x16c>)
 80005fa:	f043 0302 	orr.w	r3, r3, #2
 80005fe:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~ GPIO_PUPDR_PUPD0_0;
 8000600:	4b50      	ldr	r3, [pc, #320]	; (8000744 <set_cbus_pins+0x16c>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a4f      	ldr	r2, [pc, #316]	; (8000744 <set_cbus_pins+0x16c>)
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	60d3      	str	r3, [r2, #12]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_1;
 800060c:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <set_cbus_pins+0x16c>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a4c      	ldr	r2, [pc, #304]	; (8000744 <set_cbus_pins+0x16c>)
 8000612:	f043 0302 	orr.w	r3, r3, #2
 8000616:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED0_0);
 8000618:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <set_cbus_pins+0x16c>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	4a49      	ldr	r2, [pc, #292]	; (8000744 <set_cbus_pins+0x16c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6093      	str	r3, [r2, #8]

	// chip select PG1 chip select output
	GPIOG->MODER |= GPIO_MODER_MODE1_0;
 8000624:	4b47      	ldr	r3, [pc, #284]	; (8000744 <set_cbus_pins+0x16c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a46      	ldr	r2, [pc, #280]	; (8000744 <set_cbus_pins+0x16c>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE1_1);
 8000630:	4b44      	ldr	r3, [pc, #272]	; (8000744 <set_cbus_pins+0x16c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a43      	ldr	r2, [pc, #268]	; (8000744 <set_cbus_pins+0x16c>)
 8000636:	f023 0308 	bic.w	r3, r3, #8
 800063a:	6013      	str	r3, [r2, #0]
	// very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED1_1;
 800063c:	4b41      	ldr	r3, [pc, #260]	; (8000744 <set_cbus_pins+0x16c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	4a40      	ldr	r2, [pc, #256]	; (8000744 <set_cbus_pins+0x16c>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED1_0);
 8000648:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <set_cbus_pins+0x16c>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4a3d      	ldr	r2, [pc, #244]	; (8000744 <set_cbus_pins+0x16c>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6093      	str	r3, [r2, #8]

	// output push pull
	GPIOG->OTYPER |= (GPIO_OTYPER_OT_0);
 8000654:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <set_cbus_pins+0x16c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <set_cbus_pins+0x16c>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6053      	str	r3, [r2, #4]
	//pulled up
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD0;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <set_cbus_pins+0x16c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <set_cbus_pins+0x16c>)
 8000666:	f043 0303 	orr.w	r3, r3, #3
 800066a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~GPIO_PUPDR_PUPD1;
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <set_cbus_pins+0x16c>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <set_cbus_pins+0x16c>)
 8000672:	f023 030c 	bic.w	r3, r3, #12
 8000676:	60d3      	str	r3, [r2, #12]

	// PC9 alternate function SCK

	GPIOG->MODER &= ~(GPIO_MODER_MODER9_0);
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <set_cbus_pins+0x16c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a31      	ldr	r2, [pc, #196]	; (8000744 <set_cbus_pins+0x16c>)
 800067e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000682:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= GPIO_MODER_MODER9_1;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <set_cbus_pins+0x16c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <set_cbus_pins+0x16c>)
 800068a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800068e:	6013      	str	r3, [r2, #0]
	//  very high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <set_cbus_pins+0x16c>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a2b      	ldr	r2, [pc, #172]	; (8000744 <set_cbus_pins+0x16c>)
 8000696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800069a:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED9_0);
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <set_cbus_pins+0x16c>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <set_cbus_pins+0x16c>)
 80006a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a6:	6093      	str	r3, [r2, #8]
	//sck ends

	// PG11 alternate function mosi
	//mosi config starts

	GPIOG->MODER |= GPIO_MODER_MODE11_1;
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <set_cbus_pins+0x16c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <set_cbus_pins+0x16c>)
 80006ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006b2:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE11_0);
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <set_cbus_pins+0x16c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <set_cbus_pins+0x16c>)
 80006ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006be:	6013      	str	r3, [r2, #0]

	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_1;
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <set_cbus_pins+0x16c>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <set_cbus_pins+0x16c>)
 80006c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ca:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED11_0);
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <set_cbus_pins+0x16c>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <set_cbus_pins+0x16c>)
 80006d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006d6:	6093      	str	r3, [r2, #8]
	// pushpull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_11);
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <set_cbus_pins+0x16c>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4a19      	ldr	r2, [pc, #100]	; (8000744 <set_cbus_pins+0x16c>)
 80006de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e2:	6053      	str	r3, [r2, #4]

	//mosi config ends

	// PG10 alternate function miso
	GPIOG->MODER |= GPIO_MODER_MODE10_1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <set_cbus_pins+0x16c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a16      	ldr	r2, [pc, #88]	; (8000744 <set_cbus_pins+0x16c>)
 80006ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ee:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE10_0);
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <set_cbus_pins+0x16c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <set_cbus_pins+0x16c>)
 80006f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006fa:	6013      	str	r3, [r2, #0]
	//  high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <set_cbus_pins+0x16c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a10      	ldr	r2, [pc, #64]	; (8000744 <set_cbus_pins+0x16c>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000706:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED10_0);
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <set_cbus_pins+0x16c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <set_cbus_pins+0x16c>)
 800070e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000712:	6093      	str	r3, [r2, #8]
	// push pull
	GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_10);
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <set_cbus_pins+0x16c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <set_cbus_pins+0x16c>)
 800071a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800071e:	6053      	str	r3, [r2, #4]
	// pulled down
	GPIOG->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <set_cbus_pins+0x16c>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <set_cbus_pins+0x16c>)
 8000726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD10_0);
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <set_cbus_pins+0x16c>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <set_cbus_pins+0x16c>)
 8000732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000736:	60d3      	str	r3, [r2, #12]
	//miso_ends

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	48001800 	.word	0x48001800

08000748 <set_spi_portg_alternate_fun6>:

//working
void set_spi_portg_alternate_fun6() {
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	// pg9 10 11 alternation function 6 for spi3 0110
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_1);
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_2);
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_1);
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800076a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_2);
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 8000772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 8000776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_1);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 8000782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000786:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_2);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <set_spi_portg_alternate_fun6+0x58>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	48001800 	.word	0x48001800

080007a4 <CBUS_INIT>:
//working
void CBUS_INIT() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

	// pg9 sck pg10 miso pg11 mosi pg0 cs pg0

	enable_clock_gpio_spi();	//enabled G clocks // enabled SPI3 clock;
 80007a8:	f7ff ff00 	bl	80005ac <enable_clock_gpio_spi>
	set_cbus_pins(); // set sck mosi miso chip select  alternate function and speed and output type
 80007ac:	f7ff ff14 	bl	80005d8 <set_cbus_pins>
	set_spi_portg_alternate_fun6(); //
 80007b0:	f7ff ffca 	bl	8000748 <set_spi_portg_alternate_fun6>

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <CBUS_CHIP_SElECT_LOW>:
//working
void CBUS_CHIP_SElECT_LOW() {
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BR0;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c6:	6193      	str	r3, [r2, #24]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	48001800 	.word	0x48001800

080007d8 <CBUS_CHIP_SElECT_HIGH>:
//working
void CBUS_CHIP_SElECT_HIGH() {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	//GPIOG->ODR |=GPIO_ODR_OD0;
	GPIOG->BSRR |= GPIO_BSRR_BS0;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6193      	str	r3, [r2, #24]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	48001800 	.word	0x48001800

080007f8 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>:

void CBUS_CHIP_SElECT_OUPUT_CODEC_LOW() {
	GPIOG->BSRR |= GPIO_BSRR_BR1;
}

void CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BS1;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH+0x1c>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	6193      	str	r3, [r2, #24]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	48001800 	.word	0x48001800

08000818 <Cbus_Config>:

// working configs cbus baud rate and other settings
void Cbus_Config(SPI_TypeDef *SPI_PORT) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	//// fclk mhz 40mhz /64 ///10mhz for uncompressed clean voice
	SPI_PORT->CR1 &= ~ SPI_CR1_BR_2;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f023 0220 	bic.w	r2, r3, #32
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 |= SPI_CR1_BR_1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f043 0210 	orr.w	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 &= ~ SPI_CR1_BR_0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0208 	bic.w	r2, r3, #8
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]

	//SPI_PORT-> mode 3

	SPI_PORT->CR1 |= SPI_CR1_CPOL | SPI_CR1_CPHA;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f043 0203 	orr.w	r2, r3, #3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	601a      	str	r2, [r3, #0]

	// FULL duplex
	SPI_PORT->CR1 &= ~ SPI_CR1_RXONLY;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	601a      	str	r2, [r3, #0]
	// msb first
	SPI_PORT->CR1 &= ~ SPI_CR1_LSBFIRST;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	601a      	str	r2, [r3, #0]

	//software slave
	SPI_PORT->CR1 |= SPI_CR1_SSM;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	601a      	str	r2, [r3, #0]
	SPI_PORT->CR1 |= SPI_CR1_SSI;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]

	// master mode enabled
	SPI_PORT->CR1 |= SPI_CR1_MSTR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f043 0204 	orr.w	r2, r3, #4
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]

	// 8BIT DATA

	SPI_PORT->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	605a      	str	r2, [r3, #4]

	//SPI_PORT->

}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <Cbus_Write_no_data>:

void Cbus_Write_no_data(SPI_TypeDef *SPI_PORT, uint8_t addr) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	while (CBUS_BUSY(SPI_PORT))
 80008b0:	bf00      	nop
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe1c 	bl	80004f0 <CBUS_BUSY>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <Cbus_Write_no_data+0xe>
		;
	CBUS_SendFrame(SPI_PORT, addr);
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	4619      	mov	r1, r3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe3a 	bl	800053c <CBUS_SendFrame>
	return;
 80008c8:	bf00      	nop
}
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <CbusWriteRegister>:

void CbusWriteRegister(SPI_TypeDef *SPI_PORT, uint8_t Addr, uint16_t data) ///working
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
 80008dc:	4613      	mov	r3, r2
 80008de:	803b      	strh	r3, [r7, #0]
	uint16_t swapped = swap_uint16(data);
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe4d 	bl	8000582 <swap_uint16>
 80008e8:	4603      	mov	r3, r0
 80008ea:	81fb      	strh	r3, [r7, #14]
	uint8_t address_and_Value[3];
	uint8_t address = Addr;
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	737b      	strb	r3, [r7, #13]
	address_and_Value[2] = address;
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	72bb      	strb	r3, [r7, #10]
	address_and_Value[1] = (swapped & 0xff);
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	727b      	strb	r3, [r7, #9]
	address_and_Value[0] = ((swapped >> 8) & (0xff));
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	723b      	strb	r3, [r7, #8]
	//while(CBUS_BUSY(SPI_PORT));

	while (CBUS_BUSY(SPI_PORT)) {
 8000904:	bf00      	nop
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fdf2 	bl	80004f0 <CBUS_BUSY>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f9      	bne.n	8000906 <CbusWriteRegister+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000912:	b672      	cpsid	i
}
 8000914:	bf00      	nop
	};
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address_and_Value[2]);
 8000916:	7abb      	ldrb	r3, [r7, #10]
 8000918:	4619      	mov	r1, r3
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fe0e 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[1]);
 8000920:	7a7b      	ldrb	r3, [r7, #9]
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fe09 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[0]);
 800092a:	7a3b      	ldrb	r3, [r7, #8]
 800092c:	4619      	mov	r1, r3
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fe04 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000934:	b662      	cpsie	i
}
 8000936:	bf00      	nop
	__enable_irq();
	while (CBUS_BUSY(SPI_PORT)) {
 8000938:	bf00      	nop
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fdd8 	bl	80004f0 <CBUS_BUSY>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f9      	bne.n	800093a <CbusWriteRegister+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000946:	b662      	cpsie	i
}
 8000948:	bf00      	nop
	};
	__enable_irq();
	return;
 800094a:	bf00      	nop
}
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <Cbus_Write_Word_stream>:

void Cbus_Write_Word_stream(SPI_TypeDef *SPI_PORT, uint8_t Addr,
		uint16_t *pdata, uint16_t num_of_bytes_to_write) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	461a      	mov	r2, r3
 800095e:	460b      	mov	r3, r1
 8000960:	72fb      	strb	r3, [r7, #11]
 8000962:	4613      	mov	r3, r2
 8000964:	813b      	strh	r3, [r7, #8]

	uint8_t address = Addr;
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	753b      	strb	r3, [r7, #20]
	uint16_t i = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	82fb      	strh	r3, [r7, #22]
	uint16_t Data;
	bool iIrqDisabler;

	while (CBUS_BUSY(SPI_PORT))
 800096e:	bf00      	nop
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fdbd 	bl	80004f0 <CBUS_BUSY>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f9      	bne.n	8000970 <Cbus_Write_Word_stream+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
		;
	__disable_irq();
	iIrqDisabler = true;
 8000980:	2301      	movs	r3, #1
 8000982:	757b      	strb	r3, [r7, #21]
	CBUS_SendFrame(SPI_PORT, address);
 8000984:	7d3b      	ldrb	r3, [r7, #20]
 8000986:	4619      	mov	r1, r3
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fdd7 	bl	800053c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 800098e:	2300      	movs	r3, #0
 8000990:	82fb      	strh	r3, [r7, #22]
 8000992:	e036      	b.n	8000a02 <Cbus_Write_Word_stream+0xb0>
		if (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT)) {
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff fde1 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10d      	bne.n	80009bc <Cbus_Write_Word_stream+0x6a>
			if (iIrqDisabler != false) {
 80009a0:	7d7b      	ldrb	r3, [r7, #21]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <Cbus_Write_Word_stream+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a6:	b662      	cpsie	i
}
 80009a8:	bf00      	nop
				__enable_irq();
				iIrqDisabler = false;
 80009aa:	2300      	movs	r3, #0
 80009ac:	757b      	strb	r3, [r7, #21]
			}
			while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80009ae:	bf00      	nop
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff fdd3 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f9      	beq.n	80009b0 <Cbus_Write_Word_stream+0x5e>
		}

		Data = (pdata[i] >> 8);
 80009bc:	8afb      	ldrh	r3, [r7, #22]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	827b      	strh	r3, [r7, #18]
		CBUS_SendFrame(SPI_PORT, Data);
 80009ca:	8a7b      	ldrh	r3, [r7, #18]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fdb3 	bl	800053c <CBUS_SendFrame>
		Data = pdata[i];
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	827b      	strh	r3, [r7, #18]
		while (!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80009e2:	bf00      	nop
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fdb9 	bl	800055c <CBUS_TX_BUFFER_EMPTY_CHECK>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f9      	beq.n	80009e4 <Cbus_Write_Word_stream+0x92>
		CBUS_SendFrame(SPI_PORT, Data);
 80009f0:	8a7b      	ldrh	r3, [r7, #18]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fda0 	bl	800053c <CBUS_SendFrame>
	for (i = 0; i < num_of_bytes_to_write; ++i) {
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	3301      	adds	r3, #1
 8000a00:	82fb      	strh	r3, [r7, #22]
 8000a02:	8afa      	ldrh	r2, [r7, #22]
 8000a04:	893b      	ldrh	r3, [r7, #8]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d3c4      	bcc.n	8000994 <Cbus_Write_Word_stream+0x42>
	}
	if (iIrqDisabler != false) {
 8000a0a:	7d7b      	ldrb	r3, [r7, #21]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <Cbus_Write_Word_stream+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a10:	b662      	cpsie	i
}
 8000a12:	bf00      	nop
		__enable_irq();
	}

	return;
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop

}
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <Cbus_Read_Byte>:
	}

	return;
}

uint8_t Cbus_Read_Byte(SPI_TypeDef *SPI_PORT, uint8_t Addr) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]

	uint8_t address = Addr;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	73fb      	strb	r3, [r7, #15]
	uint16_t received_data = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	81bb      	strh	r3, [r7, #12]

	while (CBUS_BUSY(SPI_PORT))
 8000a32:	bf00      	nop
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fd5b 	bl	80004f0 <CBUS_BUSY>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f9      	bne.n	8000a34 <Cbus_Read_Byte+0x16>
		;
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) /// check for existing data and dump it
 8000a40:	e004      	b.n	8000a4c <Cbus_Read_Byte+0x2e>
	{
		received_data = CBUS_ReceiveFrame(SPI_PORT); /// dump all junk data
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f88a 	bl	8000b5c <CBUS_ReceiveFrame>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81bb      	strh	r3, [r7, #12]
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) /// check for existing data and dump it
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fd62 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f4      	bne.n	8000a42 <Cbus_Read_Byte+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
	}
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address);
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fd6b 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 1);
 8000a66:	2101      	movs	r1, #1
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fd67 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a6e:	b662      	cpsie	i
}
 8000a70:	bf00      	nop
	__enable_irq();
	while (!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 8000a72:	bf00      	nop
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fd4e 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f9      	beq.n	8000a74 <Cbus_Read_Byte+0x56>
		; //stay here until rx fifo empty
	received_data = CBUS_ReceiveFrame(SPI_PORT); // dump address byte junk
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f86b 	bl	8000b5c <CBUS_ReceiveFrame>
 8000a86:	4603      	mov	r3, r0
 8000a88:	81bb      	strh	r3, [r7, #12]
//	while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));//stay here until rx fifo empty
//	received_data=CBUS_ReceiveFrame(SPI_PORT);// read actual data
	return received_data;
 8000a8a:	89bb      	ldrh	r3, [r7, #12]
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <CBUS_READ_TWO_WORDS>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT, uint8_t addr) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]


	uint8_t address = addr;
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	73fb      	strb	r3, [r7, #15]
	uint32_t received_data;

	while (CBUS_BUSY(SPI_PORT));
 8000aa6:	bf00      	nop
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fd21 	bl	80004f0 <CBUS_BUSY>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f9      	bne.n	8000aa8 <CBUS_READ_TWO_WORDS+0x12>
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) {
 8000ab4:	e004      	b.n	8000ac0 <CBUS_READ_TWO_WORDS+0x2a>
		received_data = CBUS_ReceiveFrame(SPI_PORT); /// dump all junk data
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f850 	bl	8000b5c <CBUS_ReceiveFrame>
 8000abc:	4603      	mov	r3, r0
 8000abe:	60bb      	str	r3, [r7, #8]
	while (CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT)) {
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fd28 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f4      	bne.n	8000ab6 <CBUS_READ_TWO_WORDS+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
	}
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fd31 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 1);
 8000ada:	2101      	movs	r1, #1
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fd2d 	bl	800053c <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, 2);
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fd29 	bl	800053c <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aea:	b662      	cpsie	i
}
 8000aec:	bf00      	nop
	__enable_irq();
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000aee:	bf00      	nop
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fd10 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f9      	beq.n	8000af0 <CBUS_READ_TWO_WORDS+0x5a>
    received_data=CBUS_ReceiveFrame(SPI_PORT);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f82d 	bl	8000b5c <CBUS_ReceiveFrame>
 8000b02:	4603      	mov	r3, r0
 8000b04:	60bb      	str	r3, [r7, #8]
    received_data<<=8;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000b0c:	bf00      	nop
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fd01 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f9      	beq.n	8000b0e <CBUS_READ_TWO_WORDS+0x78>
    received_data|=CBUS_ReceiveFrame(SPI_PORT);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f81e 	bl	8000b5c <CBUS_ReceiveFrame>
 8000b20:	4603      	mov	r3, r0
 8000b22:	461a      	mov	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
    received_data<<=8;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	60bb      	str	r3, [r7, #8]
    while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000b30:	bf00      	nop
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fcef 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f9      	beq.n	8000b32 <CBUS_READ_TWO_WORDS+0x9c>
    received_data |= (CBUS_ReceiveFrame(SPI_PORT) & 0xff);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f80c 	bl	8000b5c <CBUS_ReceiveFrame>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
	return (uint32_t) received_data;
 8000b50:	68bb      	ldr	r3, [r7, #8]

}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <CBUS_ReceiveFrame>:

uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	    static uint16_t RX_data;
	     return RX_data =(uint16_t)(SSP_DR_BITMASK(*((volatile uint8_t*) &(SPI_PORT->DR))));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	330c      	adds	r3, #12
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <CBUS_ReceiveFrame+0x28>)
 8000b70:	801a      	strh	r2, [r3, #0]
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <CBUS_ReceiveFrame+0x28>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20015aa8 	.word	0x20015aa8

08000b88 <enable_codec_boot_control_gpios>:
#include "CODEC_REG.h"
#include "functional_image.h"


void enable_codec_boot_control_gpios()
{   //PG2 as output for boot control
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	GPIOG->MODER |= GPIO_MODER_MODE2_0;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE2_1);
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000b9e:	f023 0320 	bic.w	r3, r3, #32
 8000ba2:	6013      	str	r3, [r2, #0]
	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED2_1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED2_0);
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bb6:	f023 0310 	bic.w	r3, r3, #16
 8000bba:	6093      	str	r3, [r2, #8]

	// PG3 as output for boot control
	GPIOG->MODER |= GPIO_MODER_MODE3_0;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc6:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(GPIO_MODER_MODE3_1);
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bd2:	6013      	str	r3, [r2, #0]
	// high speed
	GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED3_1;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bde:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR &= ~( GPIO_OSPEEDR_OSPEED3_0);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <enable_codec_boot_control_gpios+0x70>)
 8000be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bea:	6093      	str	r3, [r2, #8]

}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	48001800 	.word	0x48001800

08000bfc <set_boot_en1_en2_high>:


void set_boot_en1_en2_high(){
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

	GPIOG->BSRR |= GPIO_BSRR_BS2;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <set_boot_en1_en2_high+0x28>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <set_boot_en1_en2_high+0x28>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
	GPIOG->BSRR |= GPIO_BSRR_BS3;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <set_boot_en1_en2_high+0x28>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <set_boot_en1_en2_high+0x28>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	48001800 	.word	0x48001800

08000c28 <set_boot_en1_en2_low>:


void set_boot_en1_en2_low(){
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

	GPIOG->BSRR &=~ GPIO_BSRR_BS2;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <set_boot_en1_en2_low+0x28>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <set_boot_en1_en2_low+0x28>)
 8000c32:	f023 0304 	bic.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
	GPIOG->BSRR &=~ GPIO_BSRR_BS3;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <set_boot_en1_en2_low+0x28>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <set_boot_en1_en2_low+0x28>)
 8000c3e:	f023 0308 	bic.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	48001800 	.word	0x48001800

08000c54 <General_Reset_to_CMX72619>:
	GPIOG->BSRR |= GPIO_BSRR_BS2;
	GPIOG->BSRR &=~ GPIO_BSRR_BS3;
}

void General_Reset_to_CMX72619()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	// setting booten1 and booten2 to 1 for cbus boot mode
	CBUS_CHIP_SElECT_LOW();
 8000c58:	f7ff fdae 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	Cbus_Write_no_data(SPI3, General_Reset);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <General_Reset_to_CMX72619+0x18>)
 8000c60:	f7ff fe20 	bl	80008a4 <Cbus_Write_no_data>
	CBUS_CHIP_SElECT_HIGH();
 8000c64:	f7ff fdb8 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	//Cbus_Write_no_data(SPI3,General_Reset);
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40003c00 	.word	0x40003c00

08000c70 <Read_audio_fifo_out_level_reg_for_3_device_check_word>:

fi_error_check Read_audio_fifo_out_level_reg_for_3_device_check_word(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	volatile uint8_t check_word_level;
    uint16_t wData;
	CBUS_CHIP_SElECT_LOW();
 8000c76:	f7ff fd9f 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	check_word_level=Cbus_Read_Byte(SPI3,Audio_out_fifo_level);
 8000c7a:	214f      	movs	r1, #79	; 0x4f
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x88>)
 8000c7e:	f7ff fece 	bl	8000a1e <Cbus_Read_Byte>
 8000c82:	4603      	mov	r3, r0
 8000c84:	707b      	strb	r3, [r7, #1]
	CBUS_CHIP_SElECT_HIGH();
 8000c86:	f7ff fda7 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(6);
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f000 fd58 	bl	8001740 <Delay_US>

	 while(check_word_level != 3){
 8000c90:	bf00      	nop
 8000c92:	787b      	ldrb	r3, [r7, #1]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d02a      	beq.n	8000cf0 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x80>
		CBUS_CHIP_SElECT_LOW();
 8000c9a:	f7ff fd8d 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
		check_word_level = Cbus_Read_Byte(SPI3, Audio_out_fifo_level);
 8000c9e:	214f      	movs	r1, #79	; 0x4f
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x88>)
 8000ca2:	f7ff febc 	bl	8000a1e <Cbus_Read_Byte>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	707b      	strb	r3, [r7, #1]
		CBUS_CHIP_SElECT_HIGH();
 8000caa:	f7ff fd95 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
		Delay_US(6);
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f000 fd46 	bl	8001740 <Delay_US>
		 if(check_word_level>=3)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d917      	bls.n	8000cec <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x7c>
		 	{
				for (int i = 0; i<3; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	e00f      	b.n	8000ce2 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x72>
					{
						//Read bootloader garbage words from CBUS FIFO
					    CBUS_CHIP_SElECT_LOW();
 8000cc2:	f7ff fd79 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
						wData = Cbus_Read_Byte(SPI3,Audio_out_fifo_data_word);
 8000cc6:	214d      	movs	r1, #77	; 0x4d
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x88>)
 8000cca:	f7ff fea8 	bl	8000a1e <Cbus_Read_Byte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	807b      	strh	r3, [r7, #2]
						CBUS_CHIP_SElECT_HIGH();
 8000cd2:	f7ff fd81 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
						Delay_US(6);
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f000 fd32 	bl	8001740 <Delay_US>
				for (int i = 0; i<3; i++)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	ddec      	ble.n	8000cc2 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x52>
					}
		 		return true;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e001      	b.n	8000cf0 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x80>
                break;
		 	}
		 else{
			 return false;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e7ff      	b.n	8000cf0 <Read_audio_fifo_out_level_reg_for_3_device_check_word+0x80>
		 }
	 }
return;
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40003c00 	.word	0x40003c00

08000cfc <Write_block>:


fi_error_check Write_block(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
    uint16_t wData;
    uint8_t audio_in_fifo_level,audio_out_fifo_level;
    uint32_t CHECKSUM_BLOCK_1=(DB1_CHK_HI<<16|DB1_CHK_LO );
 8000d02:	4b84      	ldr	r3, [pc, #528]	; (8000f14 <Write_block+0x218>)
 8000d04:	613b      	str	r3, [r7, #16]
    uint32_t CHECKSUM_BLOCK_2 =(DB2_CHK_HI<<16|DB2_CHK_LO);
 8000d06:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <Write_block+0x21c>)
 8000d08:	60fb      	str	r3, [r7, #12]
    uint32_t CHECKSUM;

	uint16_t *db_pointer;
	uint16_t  length,datalength;
	db_pointer = db1;
 8000d0a:	4b84      	ldr	r3, [pc, #528]	; (8000f1c <Write_block+0x220>)
 8000d0c:	60bb      	str	r3, [r7, #8]
    length=DB1_LEN;
 8000d0e:	f24a 0320 	movw	r3, #40992	; 0xa020
 8000d12:	80fb      	strh	r3, [r7, #6]



	CBUS_CHIP_SElECT_HIGH();
 8000d14:	f7ff fd60 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f000 fd11 	bl	8001740 <Delay_US>
	CBUS_CHIP_SElECT_LOW();
 8000d1e:	f7ff fd4b 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB1_LEN);
 8000d22:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000d26:	2149      	movs	r1, #73	; 0x49
 8000d28:	487d      	ldr	r0, [pc, #500]	; (8000f20 <Write_block+0x224>)
 8000d2a:	f7ff fdd1 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000d2e:	f7ff fd53 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f000 fd04 	bl	8001740 <Delay_US>
	CBUS_CHIP_SElECT_HIGH();
 8000d38:	f7ff fd4e 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	CBUS_CHIP_SElECT_LOW();
 8000d3c:	f7ff fd3c 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB1_PTR);
 8000d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d44:	2149      	movs	r1, #73	; 0x49
 8000d46:	4876      	ldr	r0, [pc, #472]	; (8000f20 <Write_block+0x224>)
 8000d48:	f7ff fdc2 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000d4c:	f7ff fd44 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f000 fcf5 	bl	8001740 <Delay_US>



	CBUS_CHIP_SElECT_LOW();
 8000d56:	f7ff fd2f 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	audio_in_fifo_level = Cbus_Read_Byte(SPI3, Audio_in_fifo_level);
 8000d5a:	214b      	movs	r1, #75	; 0x4b
 8000d5c:	4870      	ldr	r0, [pc, #448]	; (8000f20 <Write_block+0x224>)
 8000d5e:	f7ff fe5e 	bl	8000a1e <Cbus_Read_Byte>
 8000d62:	4603      	mov	r3, r0
 8000d64:	717b      	strb	r3, [r7, #5]
	CBUS_CHIP_SElECT_HIGH();
 8000d66:	f7ff fd37 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f000 fce8 	bl	8001740 <Delay_US>

    }

 */

	CBUS_CHIP_SElECT_LOW();
 8000d70:	f7ff fd22 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	Cbus_Write_Word_stream(SPI3, Audio_in_fifo_data_word, db1, DB1_LEN);
 8000d74:	f24a 0320 	movw	r3, #40992	; 0xa020
 8000d78:	4a68      	ldr	r2, [pc, #416]	; (8000f1c <Write_block+0x220>)
 8000d7a:	2149      	movs	r1, #73	; 0x49
 8000d7c:	4868      	ldr	r0, [pc, #416]	; (8000f20 <Write_block+0x224>)
 8000d7e:	f7ff fde8 	bl	8000952 <Cbus_Write_Word_stream>
	HAL_Delay(2);
 8000d82:	2002      	movs	r0, #2
 8000d84:	f000 fd92 	bl	80018ac <HAL_Delay>
	CBUS_CHIP_SElECT_HIGH();
 8000d88:	f7ff fd26 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f000 fd8d 	bl	80018ac <HAL_Delay>

	CBUS_CHIP_SElECT_HIGH();
 8000d92:	f7ff fd21 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>

	CBUS_CHIP_SElECT_LOW();
 8000d96:	f7ff fd0f 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CHECKSUM = CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word) << 24;
 8000d9a:	214d      	movs	r1, #77	; 0x4d
 8000d9c:	4860      	ldr	r0, [pc, #384]	; (8000f20 <Write_block+0x224>)
 8000d9e:	f7ff fe7a 	bl	8000a96 <CBUS_READ_TWO_WORDS>
 8000da2:	4603      	mov	r3, r0
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	603b      	str	r3, [r7, #0]
	CHECKSUM |= CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word);
 8000da8:	214d      	movs	r1, #77	; 0x4d
 8000daa:	485d      	ldr	r0, [pc, #372]	; (8000f20 <Write_block+0x224>)
 8000dac:	f7ff fe73 	bl	8000a96 <CBUS_READ_TWO_WORDS>
 8000db0:	4602      	mov	r2, r0
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	603b      	str	r3, [r7, #0]
	CBUS_CHIP_SElECT_HIGH();
 8000db8:	f7ff fd0e 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
/// end of block 1


    db_pointer = db2;
 8000dbc:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <Write_block+0x228>)
 8000dbe:	60bb      	str	r3, [r7, #8]
	length = DB2_LEN;
 8000dc0:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 8000dc4:	80fb      	strh	r3, [r7, #6]

	Delay_US(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fcba 	bl	8001740 <Delay_US>
	CBUS_CHIP_SElECT_LOW();
 8000dcc:	f7ff fcf4 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB2_LEN);
 8000dd0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000dd4:	2149      	movs	r1, #73	; 0x49
 8000dd6:	4852      	ldr	r0, [pc, #328]	; (8000f20 <Write_block+0x224>)
 8000dd8:	f7ff fd7a 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000ddc:	f7ff fcfc 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000de0:	200a      	movs	r0, #10
 8000de2:	f000 fcad 	bl	8001740 <Delay_US>

	CBUS_CHIP_SElECT_LOW();
 8000de6:	f7ff fce7 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, DB2_PTR);
 8000dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dee:	2149      	movs	r1, #73	; 0x49
 8000df0:	484b      	ldr	r0, [pc, #300]	; (8000f20 <Write_block+0x224>)
 8000df2:	f7ff fd6d 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000df6:	f7ff fcef 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f000 fca0 	bl	8001740 <Delay_US>
	CBUS_CHIP_SElECT_HIGH();
 8000e00:	f7ff fcea 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000e04:	200a      	movs	r0, #10
 8000e06:	f000 fc9b 	bl	8001740 <Delay_US>
		Delay_US(1);
	}

*/

	CBUS_CHIP_SElECT_LOW();
 8000e0a:	f7ff fcd5 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	Cbus_Write_Word_stream(SPI3, Audio_in_fifo_data_word, db2, DB2_LEN);
 8000e0e:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 8000e12:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <Write_block+0x228>)
 8000e14:	2149      	movs	r1, #73	; 0x49
 8000e16:	4842      	ldr	r0, [pc, #264]	; (8000f20 <Write_block+0x224>)
 8000e18:	f7ff fd9b 	bl	8000952 <Cbus_Write_Word_stream>
	HAL_Delay(2);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 fd45 	bl	80018ac <HAL_Delay>
	CBUS_CHIP_SElECT_HIGH();
 8000e22:	f7ff fcd9 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f000 fd40 	bl	80018ac <HAL_Delay>

	CBUS_CHIP_SElECT_HIGH();
 8000e2c:	f7ff fcd4 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f000 fc85 	bl	8001740 <Delay_US>
/// writing activation ptr and len
	CBUS_CHIP_SElECT_LOW();
 8000e36:	f7ff fcbf 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word,ACTIVATE_LEN);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2149      	movs	r1, #73	; 0x49
 8000e3e:	4838      	ldr	r0, [pc, #224]	; (8000f20 <Write_block+0x224>)
 8000e40:	f7ff fd46 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000e44:	f7ff fcc8 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000e48:	200a      	movs	r0, #10
 8000e4a:	f000 fc79 	bl	8001740 <Delay_US>
	CBUS_CHIP_SElECT_LOW();
 8000e4e:	f7ff fcb3 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, Audio_in_fifo_data_word, ACTIVATE_PTR);
 8000e52:	f244 0210 	movw	r2, #16400	; 0x4010
 8000e56:	2149      	movs	r1, #73	; 0x49
 8000e58:	4831      	ldr	r0, [pc, #196]	; (8000f20 <Write_block+0x224>)
 8000e5a:	f7ff fd39 	bl	80008d0 <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000e5e:	f7ff fcbb 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f000 fc6c 	bl	8001740 <Delay_US>

	HAL_Delay(10);
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f000 fd1f 	bl	80018ac <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000e6e:	f7ff fca3 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
	CHECKSUM = CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word) << 24;
 8000e72:	214d      	movs	r1, #77	; 0x4d
 8000e74:	482a      	ldr	r0, [pc, #168]	; (8000f20 <Write_block+0x224>)
 8000e76:	f7ff fe0e 	bl	8000a96 <CBUS_READ_TWO_WORDS>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	061b      	lsls	r3, r3, #24
 8000e7e:	603b      	str	r3, [r7, #0]
	CHECKSUM |= CBUS_READ_TWO_WORDS(SPI3, Audio_out_fifo_data_word);
 8000e80:	214d      	movs	r1, #77	; 0x4d
 8000e82:	4827      	ldr	r0, [pc, #156]	; (8000f20 <Write_block+0x224>)
 8000e84:	f7ff fe07 	bl	8000a96 <CBUS_READ_TWO_WORDS>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	603b      	str	r3, [r7, #0]
	CBUS_CHIP_SElECT_HIGH();
 8000e90:	f7ff fca2 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
	Delay_US(10);
 8000e94:	200a      	movs	r0, #10
 8000e96:	f000 fc53 	bl	8001740 <Delay_US>
/*
	CBUS_CHIP_SElECT_LOW();
	wData = Cbus_Read_Byte(SPI3,IRQ_Status)<<;
	CBUS_CHIP_SElECT_HIGH();
*/
	Delay_US(200);
 8000e9a:	20c8      	movs	r0, #200	; 0xc8
 8000e9c:	f000 fc50 	bl	8001740 <Delay_US>


	while(1){
			if((wData & 0x4000) != 0x4000){
 8000ea0:	8afb      	ldrh	r3, [r7, #22]
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d111      	bne.n	8000ece <Write_block+0x1d2>
				Delay_US(8);
 8000eaa:	2008      	movs	r0, #8
 8000eac:	f000 fc48 	bl	8001740 <Delay_US>
				CBUS_CHIP_SElECT_LOW();
 8000eb0:	f7ff fc82 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
				wData=Cbus_Read_Byte(SPI3, IRQ_Status)<<8;
 8000eb4:	217e      	movs	r1, #126	; 0x7e
 8000eb6:	481a      	ldr	r0, [pc, #104]	; (8000f20 <Write_block+0x224>)
 8000eb8:	f7ff fdb1 	bl	8000a1e <Cbus_Read_Byte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	82fb      	strh	r3, [r7, #22]
				CBUS_CHIP_SElECT_HIGH();
 8000ec4:	f7ff fc88 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>

				Delay_US(8);
 8000ec8:	2008      	movs	r0, #8
 8000eca:	f000 fc39 	bl	8001740 <Delay_US>
			}
			if((wData & 0x4000) == 0x4000){
 8000ece:	8afb      	ldrh	r3, [r7, #22]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0e3      	beq.n	8000ea0 <Write_block+0x1a4>
				HAL_Delay(10);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f000 fce7 	bl	80018ac <HAL_Delay>
				CBUS_CHIP_SElECT_LOW();
 8000ede:	f7ff fc6b 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
				wData = CBUS_READ_TWO_WORDS(SPI3,Audio_out_fifo_data_word)<<8;
 8000ee2:	214d      	movs	r1, #77	; 0x4d
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <Write_block+0x224>)
 8000ee6:	f7ff fdd6 	bl	8000a96 <CBUS_READ_TWO_WORDS>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	82fb      	strh	r3, [r7, #22]
				wData |= Cbus_Read_Byte(SPI3,Audio_out_fifo_data_word);
 8000ef2:	214d      	movs	r1, #77	; 0x4d
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <Write_block+0x224>)
 8000ef6:	f7ff fd92 	bl	8000a1e <Cbus_Read_Byte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	8afb      	ldrh	r3, [r7, #22]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	82fb      	strh	r3, [r7, #22]
			//	wData = Cbus_Read_Byte(SPI3,Audio_out_fifo_data_word);
			  //  Cbus_Read_Word_stream(SPI3, Audio_out_fifo_data_word,wData,1);
				CBUS_CHIP_SElECT_HIGH();
 8000f04:	f7ff fc68 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
				break;
 8000f08:	bf00      	nop

			}
			//return true;
		}

}
 8000f0a:	bf00      	nop
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	001ebf32 	.word	0x001ebf32
 8000f18:	000e253b 	.word	0x000e253b
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	20014040 	.word	0x20014040

08000f28 <CBUS_ENABLE>:

static inline void CBUS_ENABLE(SPI_TypeDef *SPI_PORT){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	SPI_PORT->CR1 |= SPI_CR1_SPE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc38 	bl	80017c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f895 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f991 	bl	800127c <MX_GPIO_Init>
  CBUS_INIT();
 8000f5a:	f7ff fc23 	bl	80007a4 <CBUS_INIT>
  MX_LPUART1_UART_Init();
 8000f5e:	f000 f8f3 	bl	8001148 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f62:	f000 f95d 	bl	8001220 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000f66:	f000 f91d 	bl	80011a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  enable_codec_boot_control_gpios();
 8000f6a:	f7ff fe0d 	bl	8000b88 <enable_codec_boot_control_gpios>
  set_boot_en1_en2_high();
 8000f6e:	f7ff fe45 	bl	8000bfc <set_boot_en1_en2_high>
  enable_timer6();
 8000f72:	f000 fbbf 	bl	80016f4 <enable_timer6>
  Cbus_Config(SPI3);
 8000f76:	483f      	ldr	r0, [pc, #252]	; (8001074 <main+0x12c>)
 8000f78:	f7ff fc4e 	bl	8000818 <Cbus_Config>
  CBUS_ENABLE(SPI3);
 8000f7c:	483d      	ldr	r0, [pc, #244]	; (8001074 <main+0x12c>)
 8000f7e:	f7ff ffd3 	bl	8000f28 <CBUS_ENABLE>
  CBUS_CHIP_SElECT_HIGH();
 8000f82:	f7ff fc29 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH();
 8000f86:	f7ff fc37 	bl	80007f8 <CBUS_CHIP_SElECT_OUPUT_CODEC_HIGH>

  // input codec setting start

  HAL_Delay(50);
 8000f8a:	2032      	movs	r0, #50	; 0x32
 8000f8c:	f000 fc8e 	bl	80018ac <HAL_Delay>

  General_Reset_to_CMX72619();
 8000f90:	f7ff fe60 	bl	8000c54 <General_Reset_to_CMX72619>

  HAL_Delay(50);
 8000f94:	2032      	movs	r0, #50	; 0x32
 8000f96:	f000 fc89 	bl	80018ac <HAL_Delay>

  if(Read_audio_fifo_out_level_reg_for_3_device_check_word()){
 8000f9a:	f7ff fe69 	bl	8000c70 <Read_audio_fifo_out_level_reg_for_3_device_check_word>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <main+0x64>
    check[5]="ok";
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <main+0x130>)
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	e002      	b.n	8000fb2 <main+0x6a>
  }
  else{
    check[5]="nook";
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <main+0x134>)
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	717b      	strb	r3, [r7, #5]
  }
    HAL_Delay(0.001);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fc7a 	bl	80018ac <HAL_Delay>
  if(Write_block()){
 8000fb8:	f7ff fea0 	bl	8000cfc <Write_block>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <main+0x82>
    check[5]="ok";
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <main+0x130>)
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	717b      	strb	r3, [r7, #5]
 8000fc8:	e002      	b.n	8000fd0 <main+0x88>
  }
  else{
    check[5]="nook";
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <main+0x134>)
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	717b      	strb	r3, [r7, #5]
  //Cbus_Write_Word_stream(SPI3, Audio_in_fifo_data_data_word, pointtoarray,size_of_array);
  //CBUS_CHIP_SElECT_HIGH();
   // input codec setting end
  //CODEC1_REG_SET();
//  OUTPUT_CODEC_RED_SET();
    set_boot_en1_en2_low();
 8000fd0:	f7ff fe2a 	bl	8000c28 <set_boot_en1_en2_low>
  HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	; 0x64
 8000fd6:	f000 fc69 	bl	80018ac <HAL_Delay>
  CBUS_CHIP_SElECT_LOW();
 8000fda:	f7ff fbed 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, MODE, 0x0222); //0024
 8000fde:	f240 2222 	movw	r2, #546	; 0x222
 8000fe2:	216b      	movs	r1, #107	; 0x6b
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <main+0x12c>)
 8000fe6:	f7ff fc73 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 8000fea:	f7ff fbf5 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f000 fc5c 	bl	80018ac <HAL_Delay>

  CBUS_CHIP_SElECT_LOW();
 8000ff4:	f7ff fbe0 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, Input_type, 0x0024); //0024
 8000ff8:	2224      	movs	r2, #36	; 0x24
 8000ffa:	2154      	movs	r1, #84	; 0x54
 8000ffc:	481d      	ldr	r0, [pc, #116]	; (8001074 <main+0x12c>)
 8000ffe:	f7ff fc67 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 8001002:	f7ff fbe9 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 8001006:	2032      	movs	r0, #50	; 0x32
 8001008:	f000 fc50 	bl	80018ac <HAL_Delay>

  CBUS_CHIP_SElECT_LOW();
 800100c:	f7ff fbd4 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, Output_type, 0x0024); //0024
 8001010:	2224      	movs	r2, #36	; 0x24
 8001012:	2156      	movs	r1, #86	; 0x56
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <main+0x12c>)
 8001016:	f7ff fc5b 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 800101a:	f7ff fbdd 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 800101e:	2032      	movs	r0, #50	; 0x32
 8001020:	f000 fc44 	bl	80018ac <HAL_Delay>
  //CBUS_CHIP_SElECT_LOW();
  //CbusWriteRegister(SPI3, MODE, 0x0222); //0222
  //CBUS_CHIP_SElECT_HIGH();
  //HAL_Delay(50);

  CBUS_CHIP_SElECT_LOW();
 8001024:	f7ff fbc8 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, ANAIN_Coarse_GAIN, 0x0700); //0A66
 8001028:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800102c:	21b1      	movs	r1, #177	; 0xb1
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <main+0x12c>)
 8001030:	f7ff fc4e 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 8001034:	f7ff fbd0 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	; 0x32
 800103a:	f000 fc37 	bl	80018ac <HAL_Delay>

  CBUS_CHIP_SElECT_LOW();
 800103e:	f7ff fbbb 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, ANAIN_Config, 0x0A09); //0A66
 8001042:	f640 2209 	movw	r2, #2569	; 0xa09
 8001046:	21b0      	movs	r1, #176	; 0xb0
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <main+0x12c>)
 800104a:	f7ff fc41 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 800104e:	f7ff fbc3 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 8001052:	2032      	movs	r0, #50	; 0x32
 8001054:	f000 fc2a 	bl	80018ac <HAL_Delay>

  //CBUS_CHIP_SElECT_LOW();
  //CbusWriteRegister(SPI3, Fine_Gain_Channel_1, 0x0080); //0A66
  //CBUS_CHIP_SElECT_HIGH();
  //HAL_Delay(50);
  CBUS_CHIP_SElECT_LOW();
 8001058:	f7ff fbae 	bl	80007b8 <CBUS_CHIP_SElECT_LOW>
  CbusWriteRegister(SPI3, ANAOUT_CONFIG, 0x0A66); //0A66
 800105c:	f640 2266 	movw	r2, #2662	; 0xa66
 8001060:	21b3      	movs	r1, #179	; 0xb3
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <main+0x12c>)
 8001064:	f7ff fc34 	bl	80008d0 <CbusWriteRegister>
  CBUS_CHIP_SElECT_HIGH();
 8001068:	f7ff fbb6 	bl	80007d8 <CBUS_CHIP_SElECT_HIGH>
  HAL_Delay(50);
 800106c:	2032      	movs	r0, #50	; 0x32
 800106e:	f000 fc1d 	bl	80018ac <HAL_Delay>

while (1)
 8001072:	e7fe      	b.n	8001072 <main+0x12a>
 8001074:	40003c00 	.word	0x40003c00
 8001078:	08004888 	.word	0x08004888
 800107c:	0800488c 	.word	0x0800488c

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	; 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fbe6 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a6:	f001 f81b 	bl	80020e0 <HAL_PWREx_ControlVoltageScaling>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b0:	f000 f97c 	bl	80013ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b4:	f000 fff6 	bl	80020a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <SystemClock_Config+0xc4>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <SystemClock_Config+0xc4>)
 80010c0:	f023 0318 	bic.w	r3, r3, #24
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c8:	2314      	movs	r3, #20
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010e0:	2301      	movs	r3, #1
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010e8:	2328      	movs	r3, #40	; 0x28
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f865 	bl	80021cc <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001108:	f000 f950 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2303      	movs	r3, #3
 8001112:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	2104      	movs	r1, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fc6a 	bl	8002a00 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001132:	f000 f93b 	bl	80013ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001136:	f002 f983 	bl	8003440 <HAL_RCCEx_EnableMSIPLLMode>
}
 800113a:	bf00      	nop
 800113c:	3758      	adds	r7, #88	; 0x58
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_LPUART1_UART_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_LPUART1_UART_Init+0x58>)
 8001156:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800115a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800115e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_LPUART1_UART_Init+0x50>)
 8001186:	f002 fbdc 	bl	8003942 <HAL_UART_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 f90c 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20015aac 	.word	0x20015aac
 800119c:	40008000 	.word	0x40008000
 80011a0:	00033324 	.word	0x00033324

080011a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_SPI1_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <MX_SPI1_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_SPI1_Init+0x74>)
 80011b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_SPI1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_SPI1_Init+0x74>)
 80011be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_SPI1_Init+0x74>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_SPI1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_SPI1_Init+0x74>)
 80011d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_SPI1_Init+0x74>)
 80011da:	2208      	movs	r2, #8
 80011dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_SPI1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_SPI1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_SPI1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_SPI1_Init+0x74>)
 80011f2:	2207      	movs	r2, #7
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_SPI1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_SPI1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_SPI1_Init+0x74>)
 8001204:	f002 fafa 	bl	80037fc <HAL_SPI_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 f8cd 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20015b30 	.word	0x20015b30
 800121c:	40013000 	.word	0x40013000

08001220 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001226:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800122a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2206      	movs	r2, #6
 8001230:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	2202      	movs	r2, #2
 8001236:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123a:	2202      	movs	r2, #2
 800123c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001240:	2201      	movs	r2, #1
 8001242:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2201      	movs	r2, #1
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2201      	movs	r2, #1
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	f000 fdd6 	bl	8001e14 <HAL_PCD_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 f89d 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20015b94 	.word	0x20015b94

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <MX_GPIO_Init+0x120>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a41      	ldr	r2, [pc, #260]	; (800139c <MX_GPIO_Init+0x120>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <MX_GPIO_Init+0x120>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <MX_GPIO_Init+0x120>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a3b      	ldr	r2, [pc, #236]	; (800139c <MX_GPIO_Init+0x120>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <MX_GPIO_Init+0x120>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MX_GPIO_Init+0x120>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a35      	ldr	r2, [pc, #212]	; (800139c <MX_GPIO_Init+0x120>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_GPIO_Init+0x120>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <MX_GPIO_Init+0x120>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a2f      	ldr	r2, [pc, #188]	; (800139c <MX_GPIO_Init+0x120>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_GPIO_Init+0x120>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_GPIO_Init+0x120>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <MX_GPIO_Init+0x120>)
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_GPIO_Init+0x120>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800130a:	f000 ff4f 	bl	80021ac <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <MX_GPIO_Init+0x124>)
 8001316:	f000 fd65 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <MX_GPIO_Init+0x128>)
 8001320:	f000 fd60 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	481b      	ldr	r0, [pc, #108]	; (80013a8 <MX_GPIO_Init+0x12c>)
 800133c:	f000 fbc0 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001340:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_GPIO_Init+0x124>)
 800135a:	f000 fbb1 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800135e:	2320      	movs	r3, #32
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0x128>)
 8001372:	f000 fba5 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_GPIO_Init+0x128>)
 800138e:	f000 fb97 	bl	8001ac0 <HAL_GPIO_Init>

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48001800 	.word	0x48001800
 80013a8:	48000800 	.word	0x48000800

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x44>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x44>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x44>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ac      	sub	sp, #176	; 0xb0
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	228c      	movs	r2, #140	; 0x8c
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fa1d 	bl	8004860 <memset>
  if(huart->Instance==LPUART1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d13d      	bne.n	80014ac <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001430:	2320      	movs	r3, #32
 8001432:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fd03 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001448:	f7ff ffb0 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 800146a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_UART_MspInit+0xb8>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800147c:	f000 fe96 	bl	80021ac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001480:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800149a:	2308      	movs	r3, #8
 800149c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_UART_MspInit+0xbc>)
 80014a8:	f000 fb0a 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	37b0      	adds	r7, #176	; 0xb0
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40008000 	.word	0x40008000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48001800 	.word	0x48001800

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_SPI_MspInit+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d128      	bne.n	8001534 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_SPI_MspInit+0x80>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_SPI_MspInit+0x80>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_SPI_MspInit+0x80>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c2      	movs	r3, #194	; 0xc2
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001522:	2305      	movs	r3, #5
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f000 fac6 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40013000 	.word	0x40013000
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0ae      	sub	sp, #184	; 0xb8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	228c      	movs	r2, #140	; 0x8c
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f97b 	bl	8004860 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001572:	d17c      	bne.n	800166e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800157a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800157e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800158a:	2318      	movs	r3, #24
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800159a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fc4f 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80015b0:	f7ff fefc 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_PCD_MspInit+0x134>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <HAL_PCD_MspInit+0x134>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_PCD_MspInit+0x134>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015e6:	230a      	movs	r3, #10
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f000 fa63 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f000 fa52 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_PCD_MspInit+0x134>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a15      	ldr	r2, [pc, #84]	; (8001678 <HAL_PCD_MspInit+0x134>)
 8001622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_PCD_MspInit+0x134>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_PCD_MspInit+0x134>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d114      	bne.n	800166a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_PCD_MspInit+0x134>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_PCD_MspInit+0x134>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164a:	6593      	str	r3, [r2, #88]	; 0x58
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_PCD_MspInit+0x134>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001658:	f000 fd98 	bl	800218c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_PCD_MspInit+0x134>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_PCD_MspInit+0x134>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001668:	e001      	b.n	800166e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800166a:	f000 fd8f 	bl	800218c <HAL_PWREx_EnableVddUSB>
}
 800166e:	bf00      	nop
 8001670:	37b8      	adds	r7, #184	; 0xb8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 f8d0 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <enable_timer6>:


#include "timer4_delay.h"

volatile int myTicks=0;
void enable_timer6(){
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

	RCC->APB1ENR1|=RCC_APB1ENR1_TIM6EN;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <enable_timer6+0x44>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <enable_timer6+0x44>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
	TIM6->PSC =80-1;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <enable_timer6+0x48>)
 8001706:	224f      	movs	r2, #79	; 0x4f
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR =0xffff;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <enable_timer6+0x48>)
 800170c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CR1 |= TIM_CR1_CEN;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <enable_timer6+0x48>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <enable_timer6+0x48>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

	while (!(TIM6->SR & (1<<0)));
 800171e:	bf00      	nop
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <enable_timer6+0x48>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f9      	beq.n	8001720 <enable_timer6+0x2c>

}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40001000 	.word	0x40001000

08001740 <Delay_US>:



void Delay_US(uint16_t US){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT = 0;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <Delay_US+0x2c>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM6->CNT < US);
 8001750:	bf00      	nop
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <Delay_US+0x2c>)
 8001754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3fa      	bcc.n	8001752 <Delay_US+0x12>
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40001000 	.word	0x40001000

08001770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001774:	f7ff ffac 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 f83b 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017a2:	f7ff fbd1 	bl	8000f48 <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20015a8c 	.word	0x20015a8c
  ldr r2, =_sidata
 80017b4:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 80017b8:	20015a8c 	.word	0x20015a8c
  ldr r4, =_ebss
 80017bc:	200160a4 	.word	0x200160a4

080017c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_2_IRQHandler>

080017c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 f943 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f80e 	bl	80017f4 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	e001      	b.n	80017e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017e4:	f7ff fde8 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_InitTick+0x6c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_InitTick+0x70>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_InitTick+0x6c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f941 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d809      	bhi.n	8001844 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f919 	bl	8001a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_InitTick+0x74>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e007      	b.n	8001854 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e004      	b.n	8001854 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e001      	b.n	8001854 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20015a88 	.word	0x20015a88
 8001864:	20015a80 	.word	0x20015a80
 8001868:	20015a84 	.word	0x20015a84

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20015a88 	.word	0x20015a88
 8001890:	200160a0 	.word	0x200160a0

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200160a0 	.word	0x200160a0

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20015a88 	.word	0x20015a88

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff47 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5c 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	e166      	b.n	8001d9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4013      	ands	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8158 	beq.w	8001d98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d005      	beq.n	8001b00 <HAL_GPIO_Init+0x40>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d017      	beq.n	8001b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d123      	bne.n	8001bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	6939      	ldr	r1, [r7, #16]
 8001bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0203 	and.w	r2, r3, #3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80b2 	beq.w	8001d98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c34:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c4c:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <HAL_GPIO_Init+0x300>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c76:	d02b      	beq.n	8001cd0 <HAL_GPIO_Init+0x210>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d025      	beq.n	8001ccc <HAL_GPIO_Init+0x20c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_GPIO_Init+0x308>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d01f      	beq.n	8001cc8 <HAL_GPIO_Init+0x208>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d019      	beq.n	8001cc4 <HAL_GPIO_Init+0x204>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_GPIO_Init+0x310>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x200>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_GPIO_Init+0x314>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1fc>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x318>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1f8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x31c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1f4>
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	e00e      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	e00c      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cb8:	2306      	movs	r3, #6
 8001cba:	e00a      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	e008      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce2:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_GPIO_Init+0x300>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d14:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d1a:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f ae91 	bne.w	8001ad0 <HAL_GPIO_Init+0x10>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	48000c00 	.word	0x48000c00
 8001dd0:	48001000 	.word	0x48001000
 8001dd4:	48001400 	.word	0x48001400
 8001dd8:	48001800 	.word	0x48001800
 8001ddc:	48001c00 	.word	0x48001c00
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	b08f      	sub	sp, #60	; 0x3c
 8001e18:	af0a      	add	r7, sp, #40	; 0x28
 8001e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e116      	b.n	8002054 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fb7f 	bl	8001544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fa4e 	bl	8004306 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	687e      	ldr	r6, [r7, #4]
 8001e72:	466d      	mov	r5, sp
 8001e74:	f106 0410 	add.w	r4, r6, #16
 8001e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e88:	1d33      	adds	r3, r6, #4
 8001e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f002 fa0e 	bl	80042ae <USB_CoreInit>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d7      	b.n	8002054 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fa3c 	bl	8004328 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e04a      	b.n	8001f4c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333d      	adds	r3, #61	; 0x3d
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	333c      	adds	r3, #60	; 0x3c
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	b298      	uxth	r0, r3
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3344      	adds	r3, #68	; 0x44
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3340      	adds	r3, #64	; 0x40
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3348      	adds	r3, #72	; 0x48
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	334c      	adds	r3, #76	; 0x4c
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3354      	adds	r3, #84	; 0x54
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3af      	bcc.n	8001eb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e044      	b.n	8001fe6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3b5      	bcc.n	8001f5c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	687e      	ldr	r6, [r7, #4]
 8001ff8:	466d      	mov	r5, sp
 8001ffa:	f106 0410 	add.w	r4, r6, #16
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200a:	e885 0003 	stmia.w	r5, {r0, r1}
 800200e:	1d33      	adds	r3, r6, #4
 8002010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f002 f9d4 	bl	80043c0 <USB_DevInit>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e014      	b.n	8002054 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f80a 	bl	800205c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fb80 	bl	8004752 <USB_DevDisconnect>

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800205c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208e:	f043 0303 	orr.w	r3, r3, #3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000

080020c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ee:	d130      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d038      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2232      	movs	r2, #50	; 0x32
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002124:	e002      	b.n	800212c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b01      	subs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002138:	d102      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f2      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214c:	d110      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e00f      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d007      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000
 8002184:	20015a80 	.word	0x20015a80
 8002188:	431bde83 	.word	0x431bde83

0800218c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219a:	6053      	str	r3, [r2, #4]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000

080021ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ba:	6053      	str	r3, [r2, #4]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f000 bc08 	b.w	80029f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e0:	4b96      	ldr	r3, [pc, #600]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ea:	4b94      	ldr	r3, [pc, #592]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80e4 	beq.w	80023ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_RCC_OscConfig+0x4c>
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	f040 808b 	bne.w	8002326 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	f040 8087 	bne.w	8002326 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002218:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_OscConfig+0x64>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e3df      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <HAL_RCC_OscConfig+0x7e>
 8002240:	4b7e      	ldr	r3, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002248:	e005      	b.n	8002256 <HAL_RCC_OscConfig+0x8a>
 800224a:	4b7c      	ldr	r3, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800224c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002256:	4293      	cmp	r3, r2
 8002258:	d223      	bcs.n	80022a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd92 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e3c0      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a72      	ldr	r2, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	496d      	ldr	r1, [pc, #436]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4b6b      	ldr	r3, [pc, #428]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	4968      	ldr	r1, [pc, #416]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e025      	b.n	80022ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a2:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a65      	ldr	r2, [pc, #404]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4960      	ldr	r1, [pc, #384]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	4b5e      	ldr	r3, [pc, #376]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	495b      	ldr	r1, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fd52 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e380      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ee:	f000 fc87 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 80022f2:	4602      	mov	r2, r0
 80022f4:	4b51      	ldr	r3, [pc, #324]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4950      	ldr	r1, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x274>)
 8002300:	5ccb      	ldrb	r3, [r1, r3]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <HAL_RCC_OscConfig+0x278>)
 800230c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230e:	4b4e      	ldr	r3, [pc, #312]	; (8002448 <HAL_RCC_OscConfig+0x27c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fa6e 	bl	80017f4 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d052      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	e364      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d032      	beq.n	8002394 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232e:	4b43      	ldr	r3, [pc, #268]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a42      	ldr	r2, [pc, #264]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800233a:	f7ff faab 	bl	8001894 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002342:	f7ff faa7 	bl	8001894 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e34d      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a35      	ldr	r2, [pc, #212]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b33      	ldr	r3, [pc, #204]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4930      	ldr	r1, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	492b      	ldr	r1, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
 8002392:	e01a      	b.n	80023ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fa78 	bl	8001894 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a8:	f7ff fa74 	bl	8001894 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e31a      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1dc>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d073      	beq.n	80024be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x21c>
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d063      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d15f      	bne.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e2f7      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x24c>
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e025      	b.n	8002464 <HAL_RCC_OscConfig+0x298>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d114      	bne.n	800244c <HAL_RCC_OscConfig+0x280>
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a02      	ldr	r2, [pc, #8]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x298>
 800243c:	40021000 	.word	0x40021000
 8002440:	08004894 	.word	0x08004894
 8002444:	20015a80 	.word	0x20015a80
 8002448:	20015a84 	.word	0x20015a84
 800244c:	4ba0      	ldr	r3, [pc, #640]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a9f      	ldr	r2, [pc, #636]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b9d      	ldr	r3, [pc, #628]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a9c      	ldr	r2, [pc, #624]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7ff fa12 	bl	8001894 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fa0e 	bl	8001894 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e2b4      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x2a8>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff f9fe 	bl	8001894 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff f9fa 	bl	8001894 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e2a0      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x2d0>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d060      	beq.n	800258c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x310>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d119      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d116      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x328>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e27d      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4973      	ldr	r1, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e040      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d023      	beq.n	800255a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002512:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff f9b9 	bl	8001894 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff f9b5 	bl	8001894 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e25b      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	495f      	ldr	r1, [pc, #380]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e018      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f995 	bl	8001894 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff f991 	bl	8001894 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e237      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03c      	beq.n	8002612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff f970 	bl	8001894 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff f96c 	bl	8001894 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e212      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3ec>
 80025d8:	e01b      	b.n	8002612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff f953 	bl	8001894 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff f94f 	bl	8001894 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1f5      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ef      	bne.n	80025f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80a6 	beq.w	800276c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d118      	bne.n	800268a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002664:	f7ff f916 	bl	8001894 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff f912 	bl	8001894 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1b8      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x508>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d8>
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a2:	e029      	b.n	80026f8 <HAL_RCC_OscConfig+0x52c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d115      	bne.n	80026d8 <HAL_RCC_OscConfig+0x50c>
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <HAL_RCC_OscConfig+0x504>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x52c>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	4b9d      	ldr	r3, [pc, #628]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a9c      	ldr	r2, [pc, #624]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e8:	4b99      	ldr	r3, [pc, #612]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a98      	ldr	r2, [pc, #608]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7ff f8c8 	bl	8001894 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7ff f8c4 	bl	8001894 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e168      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271e:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ed      	beq.n	8002708 <HAL_RCC_OscConfig+0x53c>
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7ff f8b1 	bl	8001894 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff f8ad 	bl	8001894 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e151      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ed      	bne.n	8002736 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7ffb      	ldrb	r3, [r7, #31]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d03c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01c      	beq.n	80027ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002780:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002786:	4a72      	ldr	r2, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7ff f880 	bl	8001894 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002798:	f7ff f87c 	bl	8001894 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e122      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027aa:	4b69      	ldr	r3, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80027ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x5cc>
 80027b8:	e01b      	b.n	80027f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80027bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7ff f863 	bl	8001894 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d2:	f7ff f85f 	bl	8001894 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e105      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80027e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80f9 	beq.w	80029ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80cf 	bne.w	80029a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002806:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	429a      	cmp	r2, r3
 8002818:	d12c      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	3b01      	subs	r3, #1
 8002826:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d123      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d11b      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d113      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d109      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d071      	beq.n	8002958 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d068      	beq.n	800294c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0ac      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800289c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a2:	f7fe fff7 	bl	8001894 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fff3 	bl	8001894 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e099      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x788>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d8:	3a01      	subs	r2, #1
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e2:	0212      	lsls	r2, r2, #8
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ea:	0852      	lsrs	r2, r2, #1
 80028ec:	3a01      	subs	r2, #1
 80028ee:	0552      	lsls	r2, r2, #21
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f6:	0852      	lsrs	r2, r2, #1
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0652      	lsls	r2, r2, #25
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002902:	06d2      	lsls	r2, r2, #27
 8002904:	430a      	orrs	r2, r1
 8002906:	4912      	ldr	r1, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7fe ffb6 	bl	8001894 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe ffb2 	bl	8001894 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e058      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_RCC_OscConfig+0x784>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294a:	e050      	b.n	80029ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04f      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
 8002950:	40021000 	.word	0x40021000
 8002954:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d144      	bne.n	80029ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800297c:	f7fe ff8a 	bl	8001894 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe ff86 	bl	8001894 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e02c      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x7b8>
 80029a2:	e024      	b.n	80029ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d01f      	beq.n	80029ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe ff6d 	bl	8001894 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe ff69 	bl	8001894 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4905      	ldr	r1, [pc, #20]	; (80029f8 <HAL_RCC_OscConfig+0x82c>)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x830>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
 80029e8:	e001      	b.n	80029ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	feeefffc 	.word	0xfeeefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0e7      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4970      	ldr	r1, [pc, #448]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cf      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4960      	ldr	r1, [pc, #384]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04c      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0a6      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e086      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4943      	ldr	r1, [pc, #268]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fed4 	bl	8001894 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe fed0 	bl	8001894 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e06e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d210      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4923      	ldr	r1, [pc, #140]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4910      	ldr	r1, [pc, #64]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 f824 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1fc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fe0b 	bl	80017f4 <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08004894 	.word	0x08004894
 8002bf8:	20015a80 	.word	0x20015a80
 8002bfc:	20015a84 	.word	0x20015a84

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d11e      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d134      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xac>
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca8:	617b      	str	r3, [r7, #20]
      break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cae:	617b      	str	r3, [r7, #20]
      break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	617b      	str	r3, [r7, #20]
      break;
 8002cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080048ac 	.word	0x080048ac
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20015a80 	.word	0x20015a80

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	080048a4 	.word	0x080048a4

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	080048a4 	.word	0x080048a4

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f990 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f980 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d919      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	; 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e013      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e010      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e00a      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d102      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e004      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d101      	bne.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4909      	ldr	r1, [pc, #36]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e50:	2300      	movs	r3, #0
 8002e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d041      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6c:	d02a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e72:	d824      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7e:	d81e      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d010      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e98:	e015      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fadd 	bl	8003460 <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3320      	adds	r3, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fbc6 	bl	8003644 <RCCEx_PLLSAI2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eda:	4973      	ldr	r1, [pc, #460]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d041      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d010      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f1a:	e018      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fa95 	bl	8003460 <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3320      	adds	r3, #32
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb7e 	bl	8003644 <RCCEx_PLLSAI2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	74fb      	strb	r3, [r7, #19]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6a:	494f      	ldr	r1, [pc, #316]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f72:	e001      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a0 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fc64 	bl	8001894 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fce:	e009      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fe fc60 	bl	8001894 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	d019      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fc1f 	bl	8001894 <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003058:	e00b      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fc1b 	bl	8001894 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d902      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	74fb      	strb	r3, [r7, #19]
            break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ec      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4ba6      	ldr	r3, [pc, #664]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4aa5      	ldr	r2, [pc, #660]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	499c      	ldr	r1, [pc, #624]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b97      	ldr	r3, [pc, #604]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	4994      	ldr	r1, [pc, #592]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003116:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	498b      	ldr	r1, [pc, #556]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4983      	ldr	r1, [pc, #524]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315a:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	497a      	ldr	r1, [pc, #488]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4972      	ldr	r1, [pc, #456]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	4969      	ldr	r1, [pc, #420]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c0:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ce:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	4958      	ldr	r1, [pc, #352]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	4950      	ldr	r1, [pc, #320]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4947      	ldr	r1, [pc, #284]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800324a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	493f      	ldr	r1, [pc, #252]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4936      	ldr	r1, [pc, #216]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d106      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003294:	60d3      	str	r3, [r2, #12]
 8003296:	e011      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f8d9 	bl	8003460 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d6:	491f      	ldr	r1, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e6:	d106      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]
 80032f4:	e011      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fe:	d10c      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8aa 	bl	8003460 <RCCEx_PLLSAI1_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d108      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800334c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003350:	60d3      	str	r3, [r2, #12]
 8003352:	e013      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f879 	bl	8003460 <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	4929      	ldr	r1, [pc, #164]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f856 	bl	8003460 <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f935 	bl	8003644 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	490d      	ldr	r1, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	4904      	ldr	r1, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003430:	7cbb      	ldrb	r3, [r7, #18]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346e:	4b74      	ldr	r3, [pc, #464]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800347a:	4b71      	ldr	r3, [pc, #452]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0203 	and.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d10d      	bne.n	80034a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
       ||
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003492:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
       ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d047      	beq.n	8003536 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	e044      	b.n	8003536 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d018      	beq.n	80034e6 <RCCEx_PLLSAI1_Config+0x86>
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d825      	bhi.n	8003504 <RCCEx_PLLSAI1_Config+0xa4>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d002      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x62>
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d009      	beq.n	80034d4 <RCCEx_PLLSAI1_Config+0x74>
 80034c0:	e020      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11d      	bne.n	800350a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d2:	e01a      	b.n	800350a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d4:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d116      	bne.n	800350e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e013      	b.n	800350e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003502:	e006      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e004      	b.n	8003514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003512:	bf00      	nop
    }

    if(status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	430b      	orrs	r3, r1
 8003530:	4943      	ldr	r1, [pc, #268]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d17c      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fe f9a4 	bl	8001894 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003550:	f7fe f9a0 	bl	8001894 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
        break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ef      	bne.n	8003550 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d15f      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	0211      	lsls	r1, r2, #8
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	06d2      	lsls	r2, r2, #27
 8003594:	430a      	orrs	r2, r1
 8003596:	492a      	ldr	r1, [pc, #168]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
 800359c:	e027      	b.n	80035ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d112      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	0211      	lsls	r1, r2, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6912      	ldr	r2, [r2, #16]
 80035ba:	0852      	lsrs	r2, r2, #1
 80035bc:	3a01      	subs	r2, #1
 80035be:	0552      	lsls	r2, r2, #21
 80035c0:	430a      	orrs	r2, r1
 80035c2:	491f      	ldr	r1, [pc, #124]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
 80035c8:	e011      	b.n	80035ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	0211      	lsls	r1, r2, #8
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6952      	ldr	r2, [r2, #20]
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0652      	lsls	r2, r2, #25
 80035e6:	430a      	orrs	r2, r1
 80035e8:	4915      	ldr	r1, [pc, #84]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a13      	ldr	r2, [pc, #76]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe f94b 	bl	8001894 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003600:	e009      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003602:	f7fe f947 	bl	8001894 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d902      	bls.n	8003616 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	73fb      	strb	r3, [r7, #15]
          break;
 8003614:	e005      	b.n	8003622 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ef      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000

08003644 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003652:	4b69      	ldr	r3, [pc, #420]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800365e:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
       ||
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003676:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
       ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d047      	beq.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e044      	b.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x86>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x62>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x74>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036fe:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	430b      	orrs	r3, r1
 8003714:	4938      	ldr	r1, [pc, #224]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d166      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372c:	f7fe f8b2 	bl	8001894 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003732:	e009      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003734:	f7fe f8ae 	bl	8001894 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d902      	bls.n	8003748 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	73fb      	strb	r3, [r7, #15]
        break;
 8003746:	e005      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ef      	bne.n	8003734 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d149      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d110      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	06d2      	lsls	r2, r2, #27
 8003778:	430a      	orrs	r2, r1
 800377a:	491f      	ldr	r1, [pc, #124]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	614b      	str	r3, [r1, #20]
 8003780:	e011      	b.n	80037a6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800378a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	0211      	lsls	r1, r2, #8
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6912      	ldr	r2, [r2, #16]
 8003798:	0852      	lsrs	r2, r2, #1
 800379a:	3a01      	subs	r2, #1
 800379c:	0652      	lsls	r2, r2, #25
 800379e:	430a      	orrs	r2, r1
 80037a0:	4915      	ldr	r1, [pc, #84]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe f86f 	bl	8001894 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037b8:	e009      	b.n	80037ce <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ba:	f7fe f86b 	bl	8001894 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	73fb      	strb	r3, [r7, #15]
          break;
 80037cc:	e005      	b.n	80037da <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	4903      	ldr	r1, [pc, #12]	; (80037f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e095      	b.n	800393a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d009      	beq.n	8003834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
 8003826:	e005      	b.n	8003834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fe36 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003874:	d902      	bls.n	800387c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e002      	b.n	8003882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800387c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800388a:	d007      	beq.n	800389c <HAL_SPI_Init+0xa0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003894:	d002      	beq.n	800389c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	ea42 0103 	orr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f003 0204 	and.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e040      	b.n	80039d6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd fd4b 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2224      	movs	r2, #36	; 0x24
 800396e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f82d 	bl	80039e0 <UART_SetConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e022      	b.n	80039d6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fad9 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fb60 	bl	8004094 <UART_CheckIdleState>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b08a      	sub	sp, #40	; 0x28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4ba4      	ldr	r3, [pc, #656]	; (8003ca0 <UART_SetConfig+0x2c0>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a99      	ldr	r2, [pc, #612]	; (8003ca4 <UART_SetConfig+0x2c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a90      	ldr	r2, [pc, #576]	; (8003ca8 <UART_SetConfig+0x2c8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d126      	bne.n	8003ab8 <UART_SetConfig+0xd8>
 8003a6a:	4b90      	ldr	r3, [pc, #576]	; (8003cac <UART_SetConfig+0x2cc>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d81b      	bhi.n	8003ab0 <UART_SetConfig+0xd0>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0xa0>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aa9 	.word	0x08003aa9
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e116      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e112      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e10e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e10a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e106      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7c      	ldr	r2, [pc, #496]	; (8003cb0 <UART_SetConfig+0x2d0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d138      	bne.n	8003b34 <UART_SetConfig+0x154>
 8003ac2:	4b7a      	ldr	r3, [pc, #488]	; (8003cac <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d82d      	bhi.n	8003b2c <UART_SetConfig+0x14c>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0xf8>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003b2d 	.word	0x08003b2d
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b1d 	.word	0x08003b1d
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b2d 	.word	0x08003b2d
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b15 	.word	0x08003b15
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e0d8      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b14:	2302      	movs	r3, #2
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e0d4      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e0d0      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b24:	2308      	movs	r3, #8
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e0cc      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e0c8      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5e      	ldr	r2, [pc, #376]	; (8003cb4 <UART_SetConfig+0x2d4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d125      	bne.n	8003b8a <UART_SetConfig+0x1aa>
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	; (8003cac <UART_SetConfig+0x2cc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d016      	beq.n	8003b7a <UART_SetConfig+0x19a>
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d818      	bhi.n	8003b82 <UART_SetConfig+0x1a2>
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d00a      	beq.n	8003b6a <UART_SetConfig+0x18a>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d814      	bhi.n	8003b82 <UART_SetConfig+0x1a2>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <UART_SetConfig+0x182>
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d008      	beq.n	8003b72 <UART_SetConfig+0x192>
 8003b60:	e00f      	b.n	8003b82 <UART_SetConfig+0x1a2>
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b68:	e0ad      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b70:	e0a9      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b72:	2304      	movs	r3, #4
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b78:	e0a5      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b80:	e0a1      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b82:	2310      	movs	r3, #16
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b88:	e09d      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <UART_SetConfig+0x2d8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d125      	bne.n	8003be0 <UART_SetConfig+0x200>
 8003b94:	4b45      	ldr	r3, [pc, #276]	; (8003cac <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba0:	d016      	beq.n	8003bd0 <UART_SetConfig+0x1f0>
 8003ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba4:	d818      	bhi.n	8003bd8 <UART_SetConfig+0x1f8>
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d00a      	beq.n	8003bc0 <UART_SetConfig+0x1e0>
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d814      	bhi.n	8003bd8 <UART_SetConfig+0x1f8>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <UART_SetConfig+0x1d8>
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d008      	beq.n	8003bc8 <UART_SetConfig+0x1e8>
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x1f8>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e082      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e07e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e07a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e076      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e072      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a35      	ldr	r2, [pc, #212]	; (8003cbc <UART_SetConfig+0x2dc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d12a      	bne.n	8003c40 <UART_SetConfig+0x260>
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <UART_SetConfig+0x2cc>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf8:	d01a      	beq.n	8003c30 <UART_SetConfig+0x250>
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d81b      	bhi.n	8003c38 <UART_SetConfig+0x258>
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d00c      	beq.n	8003c20 <UART_SetConfig+0x240>
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d815      	bhi.n	8003c38 <UART_SetConfig+0x258>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <UART_SetConfig+0x238>
 8003c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c14:	d008      	beq.n	8003c28 <UART_SetConfig+0x248>
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x258>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e052      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e04e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e04a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c30:	2308      	movs	r3, #8
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e046      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e042      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <UART_SetConfig+0x2c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d13a      	bne.n	8003cc0 <UART_SetConfig+0x2e0>
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <UART_SetConfig+0x2cc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c58:	d01a      	beq.n	8003c90 <UART_SetConfig+0x2b0>
 8003c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c5e:	d81b      	bhi.n	8003c98 <UART_SetConfig+0x2b8>
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c64:	d00c      	beq.n	8003c80 <UART_SetConfig+0x2a0>
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d815      	bhi.n	8003c98 <UART_SetConfig+0x2b8>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <UART_SetConfig+0x298>
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d008      	beq.n	8003c88 <UART_SetConfig+0x2a8>
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x2b8>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e022      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e01e      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e01a      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e016      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e012      	b.n	8003cc6 <UART_SetConfig+0x2e6>
 8003ca0:	efff69f3 	.word	0xefff69f3
 8003ca4:	40008000 	.word	0x40008000
 8003ca8:	40013800 	.word	0x40013800
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40004400 	.word	0x40004400
 8003cb4:	40004800 	.word	0x40004800
 8003cb8:	40004c00 	.word	0x40004c00
 8003cbc:	40005000 	.word	0x40005000
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a9f      	ldr	r2, [pc, #636]	; (8003f48 <UART_SetConfig+0x568>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d17a      	bne.n	8003dc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d824      	bhi.n	8003d22 <UART_SetConfig+0x342>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0x300>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d23 	.word	0x08003d23
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d13 	.word	0x08003d13
 8003cf4:	08003d23 	.word	0x08003d23
 8003cf8:	08003d23 	.word	0x08003d23
 8003cfc:	08003d23 	.word	0x08003d23
 8003d00:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d04:	f7ff f814 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003d08:	61f8      	str	r0, [r7, #28]
        break;
 8003d0a:	e010      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <UART_SetConfig+0x56c>)
 8003d0e:	61fb      	str	r3, [r7, #28]
        break;
 8003d10:	e00d      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe ff75 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003d16:	61f8      	str	r0, [r7, #28]
        break;
 8003d18:	e009      	b.n	8003d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	61fb      	str	r3, [r7, #28]
        break;
 8003d20:	e005      	b.n	8003d2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80fb 	beq.w	8003f2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d305      	bcc.n	8003d52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d903      	bls.n	8003d5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d58:	e0e8      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	461c      	mov	r4, r3
 8003d60:	4615      	mov	r5, r2
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	022b      	lsls	r3, r5, #8
 8003d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d70:	0222      	lsls	r2, r4, #8
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	6849      	ldr	r1, [r1, #4]
 8003d76:	0849      	lsrs	r1, r1, #1
 8003d78:	2000      	movs	r0, #0
 8003d7a:	4688      	mov	r8, r1
 8003d7c:	4681      	mov	r9, r0
 8003d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d82:	eb43 0b09 	adc.w	fp, r3, r9
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d94:	4650      	mov	r0, sl
 8003d96:	4659      	mov	r1, fp
 8003d98:	f7fc fa28 	bl	80001ec <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003daa:	d308      	bcc.n	8003dbe <UART_SetConfig+0x3de>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db2:	d204      	bcs.n	8003dbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e0b6      	b.n	8003f2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dc4:	e0b2      	b.n	8003f2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d15e      	bne.n	8003e8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d828      	bhi.n	8003e2a <UART_SetConfig+0x44a>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x400>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe ff94 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
        break;
 8003e0a:	e014      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe ffa6 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003e10:	61f8      	str	r0, [r7, #28]
        break;
 8003e12:	e010      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <UART_SetConfig+0x56c>)
 8003e16:	61fb      	str	r3, [r7, #28]
        break;
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fef1 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003e1e:	61f8      	str	r0, [r7, #28]
        break;
 8003e20:	e009      	b.n	8003e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e005      	b.n	8003e36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d077      	beq.n	8003f2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005a      	lsls	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d916      	bls.n	8003e86 <UART_SetConfig+0x4a6>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5e:	d212      	bcs.n	8003e86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	8afa      	ldrh	r2, [r7, #22]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e052      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d827      	bhi.n	8003ee6 <UART_SetConfig+0x506>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x4bc>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7fe ff36 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	61f8      	str	r0, [r7, #28]
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7fe ff48 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <UART_SetConfig+0x56c>)
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe fe93 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085a      	lsrs	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d909      	bls.n	8003f26 <UART_SetConfig+0x546>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d205      	bcs.n	8003f26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e002      	b.n	8003f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40008000 	.word	0x40008000
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a4:	f7fd fbf6 	bl	8001894 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d10e      	bne.n	80040d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f82d 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e023      	b.n	800411e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d10e      	bne.n	8004102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f817 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e00d      	b.n	800411e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b09c      	sub	sp, #112	; 0x70
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	e0a5      	b.n	8004284 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	f000 80a1 	beq.w	8004284 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fd fba7 	bl	8001894 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <UART_WaitOnFlagUntilTimeout+0x32>
 8004152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004154:	2b00      	cmp	r3, #0
 8004156:	d13e      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004178:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800417c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e6      	bne.n	8004158 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	663b      	str	r3, [r7, #96]	; 0x60
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e067      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d04f      	beq.n	8004284 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f2:	d147      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
 800421e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3308      	adds	r3, #8
 8004236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	66bb      	str	r3, [r7, #104]	; 0x68
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004250:	623a      	str	r2, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	61bb      	str	r3, [r7, #24]
   return(result);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e010      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	429a      	cmp	r2, r3
 80042a0:	f43f af4a 	beq.w	8004138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3770      	adds	r7, #112	; 0x70
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042ae:	b084      	sub	sp, #16
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	f107 001c 	add.w	r0, r7, #28
 80042bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa6f 	bl	80047b0 <USB_CoreReset>
 80042d2:	4603      	mov	r3, r0
 80042d4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80042d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38
 80042e8:	e005      	b.n	80042f6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004302:	b004      	add	sp, #16
 8004304:	4770      	bx	lr

08004306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 0201 	bic.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004356:	2001      	movs	r0, #1
 8004358:	f7fd faa8 	bl	80018ac <HAL_Delay>
      ms++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa16 	bl	8004794 <USB_GetMode>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d01e      	beq.n	80043ac <USB_SetCurrentMode+0x84>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b31      	cmp	r3, #49	; 0x31
 8004372:	d9f0      	bls.n	8004356 <USB_SetCurrentMode+0x2e>
 8004374:	e01a      	b.n	80043ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fd fa8f 	bl	80018ac <HAL_Delay>
      ms++;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3301      	adds	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f9fd 	bl	8004794 <USB_GetMode>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <USB_SetCurrentMode+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b31      	cmp	r3, #49	; 0x31
 80043a4:	d9f0      	bls.n	8004388 <USB_SetCurrentMode+0x60>
 80043a6:	e001      	b.n	80043ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e005      	b.n	80043b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b32      	cmp	r3, #50	; 0x32
 80043b0:	d101      	bne.n	80043b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e009      	b.n	80043f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3340      	adds	r3, #64	; 0x40
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3301      	adds	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0e      	cmp	r3, #14
 80043f8:	d9f2      	bls.n	80043e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11c      	bne.n	800443a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e005      	b.n	8004446 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004458:	4619      	mov	r1, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004460:	461a      	mov	r2, r3
 8004462:	680b      	ldr	r3, [r1, #0]
 8004464:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004466:	2103      	movs	r1, #3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f959 	bl	8004720 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800446e:	2110      	movs	r1, #16
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8f1 	bl	8004658 <USB_FlushTxFifo>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f91d 	bl	80046c0 <USB_FlushRxFifo>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e043      	b.n	8004542 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d0:	d118      	bne.n	8004504 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e013      	b.n	8004516 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	461a      	mov	r2, r3
 80044fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e008      	b.n	8004516 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800453a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3301      	adds	r3, #1
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b7      	bcc.n	80044ba <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	e043      	b.n	80045d8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004566:	d118      	bne.n	800459a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e013      	b.n	80045ac <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e008      	b.n	80045ac <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3b7      	bcc.n	8004550 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f043 0210 	orr.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <USB_DevInit+0x294>)
 8004614:	4313      	orrs	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800461a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f043 0208 	orr.w	r2, r3, #8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800462c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800464e:	b004      	add	sp, #16
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	803c3800 	.word	0x803c3800

08004658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <USB_FlushTxFifo+0x64>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e01b      	b.n	80046b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	daf2      	bge.n	8004666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	019b      	lsls	r3, r3, #6
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <USB_FlushTxFifo+0x64>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d0f0      	beq.n	8004690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	00030d40 	.word	0x00030d40

080046c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a11      	ldr	r2, [pc, #68]	; (800471c <USB_FlushRxFifo+0x5c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e018      	b.n	8004710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	daf2      	bge.n	80046cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2210      	movs	r2, #16
 80046ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a08      	ldr	r2, [pc, #32]	; (800471c <USB_FlushRxFifo+0x5c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e006      	b.n	8004710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b10      	cmp	r3, #16
 800470c:	d0f0      	beq.n	80046f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	00030d40 	.word	0x00030d40

08004720 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0301 	and.w	r3, r3, #1
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <USB_CoreReset+0x64>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e01b      	b.n	8004806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	daf2      	bge.n	80047bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <USB_CoreReset+0x64>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e006      	b.n	8004806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d0f0      	beq.n	80047e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	00030d40 	.word	0x00030d40

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	; (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	; (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	; (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	; (800485c <__libc_init_array+0x44>)
 800482c:	f000 f820 	bl	8004870 <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	080048e4 	.word	0x080048e4
 8004854:	080048e4 	.word	0x080048e4
 8004858:	080048e4 	.word	0x080048e4
 800485c:	080048e8 	.word	0x080048e8

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <_init>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr

0800487c <_fini>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr
