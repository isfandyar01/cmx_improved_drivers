
CMX_AUDIO_Codec_drivers_2.0-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800467c  0800467c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000000c  08004690  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08004690  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f84  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acd  00000000  00000000  00033fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc15  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139b9  00000000  00000000  000647cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011badc  00000000  00000000  00078186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  00193cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004600 	.word	0x08004600

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004600 	.word	0x08004600

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <CBUS_BUSY>:

uint32_t CBUS_READ_TWO_WORDS(SPI_TypeDef *SPI_PORT,uint8_t addr);



static inline FlagStatus CBUS_BUSY(SPI_TypeDef *SPI_PORT) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 7)) ? SET : RESET;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>:

static inline FlagStatus CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 0)) ? SET : RESET; // reset means buffer empty
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf14      	ite	ne
 800052a:	2301      	movne	r3, #1
 800052c:	2300      	moveq	r3, #0
 800052e:	b2db      	uxtb	r3, r3
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <CBUS_TX_BUFFER_EMPTY_CHECK>:





static inline FlagStatus CBUS_TX_BUFFER_EMPTY_CHECK(SPI_TypeDef *SPI_PORT) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	return (SPI_PORT->SR & (1 << 1)) ? SET : RESET;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf14      	ite	ne
 8000550:	2301      	movne	r3, #1
 8000552:	2300      	moveq	r3, #0
 8000554:	b2db      	uxtb	r3, r3
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <swap_uint16>:


static inline uint16_t swap_uint16( uint16_t val )
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	4603      	mov	r3, r0
 800056a:	80fb      	strh	r3, [r7, #6]
    return (val << 8) | (val >> 8 );
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	b21a      	sxth	r2, r3
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b21b      	sxth	r3, r3
 800057a:	4313      	orrs	r3, r2
 800057c:	b21b      	sxth	r3, r3
 800057e:	b29b      	uxth	r3, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <CBUS_INIT>:

#include "cbus.h"
#include "timer6_delay.h"
void CBUS_INIT() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

	// pg9 sck pg10 miso pg11 mosi pg0 cs pg0

	enable_clock_gpio_spi();	//enabled G clocks // enabled SPI3 clock;
 8000590:	f000 f806 	bl	80005a0 <enable_clock_gpio_spi>
	set_cbus_pins(); // set sck mosi miso chip select  alternate function and speed and output type
 8000594:	f000 f81a 	bl	80005cc <set_cbus_pins>
	set_spi_portg_alternate_fun6(); //
 8000598:	f000 f8d0 	bl	800073c <set_spi_portg_alternate_fun6>

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <enable_clock_gpio_spi>:


void enable_clock_gpio_spi() {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN; //enabled G clocks
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <enable_clock_gpio_spi+0x28>)
 80005a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <enable_clock_gpio_spi+0x28>)
 80005aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ae:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_SPI3EN; // enabled SPI3 clock;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <enable_clock_gpio_spi+0x28>)
 80005b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <enable_clock_gpio_spi+0x28>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	6593      	str	r3, [r2, #88]	; 0x58
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <set_cbus_pins>:
//working
void set_cbus_pins() {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	// chip select PG0 chip select output
	// chip select PG0 chip select output
		GPIOG->MODER |= GPIO_MODER_MODE0_0;
 80005d0:	4b59      	ldr	r3, [pc, #356]	; (8000738 <set_cbus_pins+0x16c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a58      	ldr	r2, [pc, #352]	; (8000738 <set_cbus_pins+0x16c>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	6013      	str	r3, [r2, #0]
		GPIOG->MODER &= ~(GPIO_MODER_MODE0_1);
 80005dc:	4b56      	ldr	r3, [pc, #344]	; (8000738 <set_cbus_pins+0x16c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a55      	ldr	r2, [pc, #340]	; (8000738 <set_cbus_pins+0x16c>)
 80005e2:	f023 0302 	bic.w	r3, r3, #2
 80005e6:	6013      	str	r3, [r2, #0]
		// pull up-down settings
		GPIOG->PUPDR |= GPIO_PUPDR_PUPD0_1;
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <set_cbus_pins+0x16c>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a52      	ldr	r2, [pc, #328]	; (8000738 <set_cbus_pins+0x16c>)
 80005ee:	f043 0302 	orr.w	r3, r3, #2
 80005f2:	60d3      	str	r3, [r2, #12]
		GPIOG->PUPDR &= ~ GPIO_PUPDR_PUPD0_0;
 80005f4:	4b50      	ldr	r3, [pc, #320]	; (8000738 <set_cbus_pins+0x16c>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a4f      	ldr	r2, [pc, #316]	; (8000738 <set_cbus_pins+0x16c>)
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	60d3      	str	r3, [r2, #12]
		// very high speed
		GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED0_1;
 8000600:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <set_cbus_pins+0x16c>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	4a4c      	ldr	r2, [pc, #304]	; (8000738 <set_cbus_pins+0x16c>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6093      	str	r3, [r2, #8]
		GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED0_0);
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <set_cbus_pins+0x16c>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a49      	ldr	r2, [pc, #292]	; (8000738 <set_cbus_pins+0x16c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6093      	str	r3, [r2, #8]

		// chip select PG1 chip select output
		GPIOG->MODER |= GPIO_MODER_MODE1_0;
 8000618:	4b47      	ldr	r3, [pc, #284]	; (8000738 <set_cbus_pins+0x16c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a46      	ldr	r2, [pc, #280]	; (8000738 <set_cbus_pins+0x16c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6013      	str	r3, [r2, #0]
		GPIOG->MODER &= ~(GPIO_MODER_MODE1_1);
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <set_cbus_pins+0x16c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a43      	ldr	r2, [pc, #268]	; (8000738 <set_cbus_pins+0x16c>)
 800062a:	f023 0308 	bic.w	r3, r3, #8
 800062e:	6013      	str	r3, [r2, #0]
		// very high speed
		GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED1_1;
 8000630:	4b41      	ldr	r3, [pc, #260]	; (8000738 <set_cbus_pins+0x16c>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	4a40      	ldr	r2, [pc, #256]	; (8000738 <set_cbus_pins+0x16c>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6093      	str	r3, [r2, #8]
		GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED1_0);
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <set_cbus_pins+0x16c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	4a3d      	ldr	r2, [pc, #244]	; (8000738 <set_cbus_pins+0x16c>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6093      	str	r3, [r2, #8]

		// output push pull
		GPIOG->OTYPER |= (GPIO_OTYPER_OT_0);
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <set_cbus_pins+0x16c>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a3a      	ldr	r2, [pc, #232]	; (8000738 <set_cbus_pins+0x16c>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6053      	str	r3, [r2, #4]
		//pulled up
		GPIOG->PUPDR |= GPIO_PUPDR_PUPD0;
 8000654:	4b38      	ldr	r3, [pc, #224]	; (8000738 <set_cbus_pins+0x16c>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <set_cbus_pins+0x16c>)
 800065a:	f043 0303 	orr.w	r3, r3, #3
 800065e:	60d3      	str	r3, [r2, #12]
		GPIOG->PUPDR &= ~GPIO_PUPDR_PUPD1;
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <set_cbus_pins+0x16c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a34      	ldr	r2, [pc, #208]	; (8000738 <set_cbus_pins+0x16c>)
 8000666:	f023 030c 	bic.w	r3, r3, #12
 800066a:	60d3      	str	r3, [r2, #12]

		// PC9 alternate function SCK

		GPIOG->MODER &= ~(GPIO_MODER_MODER9_0);
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <set_cbus_pins+0x16c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a31      	ldr	r2, [pc, #196]	; (8000738 <set_cbus_pins+0x16c>)
 8000672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000676:	6013      	str	r3, [r2, #0]
		GPIOG->MODER |= GPIO_MODER_MODER9_1;
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <set_cbus_pins+0x16c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a2e      	ldr	r2, [pc, #184]	; (8000738 <set_cbus_pins+0x16c>)
 800067e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000682:	6013      	str	r3, [r2, #0]
		//  very high speed
		GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED9_1;
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <set_cbus_pins+0x16c>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a2b      	ldr	r2, [pc, #172]	; (8000738 <set_cbus_pins+0x16c>)
 800068a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800068e:	6093      	str	r3, [r2, #8]
		GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED9_0);
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <set_cbus_pins+0x16c>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <set_cbus_pins+0x16c>)
 8000696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800069a:	6093      	str	r3, [r2, #8]
		//sck ends

		// PG11 alternate function mosi
		//mosi config starts

		GPIOG->MODER |= GPIO_MODER_MODE11_1;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <set_cbus_pins+0x16c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <set_cbus_pins+0x16c>)
 80006a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a6:	6013      	str	r3, [r2, #0]
		GPIOG->MODER &= ~(GPIO_MODER_MODE11_0);
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <set_cbus_pins+0x16c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <set_cbus_pins+0x16c>)
 80006ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80006b2:	6013      	str	r3, [r2, #0]

		// high speed
		GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED11_1;
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <set_cbus_pins+0x16c>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <set_cbus_pins+0x16c>)
 80006ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006be:	6093      	str	r3, [r2, #8]
		GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED11_0);
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <set_cbus_pins+0x16c>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <set_cbus_pins+0x16c>)
 80006c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ca:	6093      	str	r3, [r2, #8]
		// pushpull
		GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_11);
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <set_cbus_pins+0x16c>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a19      	ldr	r2, [pc, #100]	; (8000738 <set_cbus_pins+0x16c>)
 80006d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006d6:	6053      	str	r3, [r2, #4]

		//mosi config ends

		// PG10 alternate function miso
		GPIOG->MODER |= GPIO_MODER_MODE10_1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <set_cbus_pins+0x16c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <set_cbus_pins+0x16c>)
 80006de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e2:	6013      	str	r3, [r2, #0]
		GPIOG->MODER &= ~(GPIO_MODER_MODE10_0);
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <set_cbus_pins+0x16c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <set_cbus_pins+0x16c>)
 80006ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006ee:	6013      	str	r3, [r2, #0]
		//  high speed
		GPIOG->OSPEEDR |= GPIO_OSPEEDR_OSPEED10_1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <set_cbus_pins+0x16c>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	4a10      	ldr	r2, [pc, #64]	; (8000738 <set_cbus_pins+0x16c>)
 80006f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006fa:	6093      	str	r3, [r2, #8]
		GPIOG->OSPEEDR |= ( GPIO_OSPEEDR_OSPEED10_0);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <set_cbus_pins+0x16c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <set_cbus_pins+0x16c>)
 8000702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000706:	6093      	str	r3, [r2, #8]
		// push pull
		GPIOG->OTYPER &= ~(GPIO_OTYPER_IDR_10);
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <set_cbus_pins+0x16c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <set_cbus_pins+0x16c>)
 800070e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000712:	6053      	str	r3, [r2, #4]
		// pulled down
		GPIOG->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <set_cbus_pins+0x16c>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <set_cbus_pins+0x16c>)
 800071a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071e:	60d3      	str	r3, [r2, #12]
		GPIOG->PUPDR &= ~ (GPIO_PUPDR_PUPD10_0);
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <set_cbus_pins+0x16c>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <set_cbus_pins+0x16c>)
 8000726:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800072a:	60d3      	str	r3, [r2, #12]
		//miso_ends

}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	48001800 	.word	0x48001800

0800073c <set_spi_portg_alternate_fun6>:

//working
void set_spi_portg_alternate_fun6() {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	// pg9 10 11 alternation function 6 for spi3 0110
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_1);
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL9_2);
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	4a10      	ldr	r2, [pc, #64]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000756:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_1);
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL10_2);
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 800076a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_1);
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOG->AFR[1] |= (GPIO_AFRH_AFSEL11_2);
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <set_spi_portg_alternate_fun6+0x58>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	48001800 	.word	0x48001800

08000798 <CBUS_CHIP_SElECT_LOW>:
//working

//working
void CBUS_CHIP_SElECT_LOW() {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	GPIOG->BSRR |= GPIO_BSRR_BR0;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <CBUS_CHIP_SElECT_LOW+0x1c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <CBUS_CHIP_SElECT_LOW+0x1c>)
 80007a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a6:	6193      	str	r3, [r2, #24]

}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	48001800 	.word	0x48001800

080007b8 <CBUS_CHIP_SElECT_HIGH>:
//working
void CBUS_CHIP_SElECT_HIGH() {
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	//GPIOG->ODR |=GPIO_ODR_OD0;
	GPIOG->BSRR |= GPIO_BSRR_BS0;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <CBUS_CHIP_SElECT_HIGH+0x1c>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6193      	str	r3, [r2, #24]
	//Delay_US(10);
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	48001800 	.word	0x48001800

080007d8 <Cbus_Config>:
	GPIOG->BSRR |= GPIO_BSRR_BS1;
	//Delay_US(10);
}

// working configs cbus baud rate and other settings
void Cbus_Config(SPI_TypeDef *SPI_PORT) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	//// fclk mhz 40mhz /64 ///10mhz for uncompressed clean voice
	SPI_PORT->CR1 &= ~  SPI_CR1_BR_2;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f023 0220 	bic.w	r2, r3, #32
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 |=  SPI_CR1_BR_1;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f043 0210 	orr.w	r2, r3, #16
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	601a      	str	r2, [r3, #0]

	SPI_PORT->CR1 &= ~  SPI_CR1_BR_0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f023 0208 	bic.w	r2, r3, #8
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]

	//SPI_PORT-> mode 3

	//SPI_PORT->CR1 |= SPI_CR1_CPHA;

	SPI_PORT->CR1 &= ~ SPI_CR1_CPOL;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f023 0202 	bic.w	r2, r3, #2
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	601a      	str	r2, [r3, #0]
	SPI_PORT->CR1 &= ~ SPI_CR1_CPHA;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0201 	bic.w	r2, r3, #1
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	601a      	str	r2, [r3, #0]

	// FULL duplex
	SPI_PORT->CR1 &= ~ SPI_CR1_RXONLY;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	601a      	str	r2, [r3, #0]
	// msb first
	SPI_PORT->CR1 &= ~ SPI_CR1_LSBFIRST;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	601a      	str	r2, [r3, #0]

	//software slave
	SPI_PORT->CR1 |= SPI_CR1_SSM;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
	SPI_PORT->CR1 |= SPI_CR1_SSI;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	601a      	str	r2, [r3, #0]

	// master mode enabled
	SPI_PORT->CR1 |= SPI_CR1_MSTR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f043 0204 	orr.w	r2, r3, #4
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]

	// 8BIT DATA

	SPI_PORT->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 );
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	605a      	str	r2, [r3, #4]

	//SPI_PORT->

	SPI_PORT->CR2 |= SPI_CR2_FRXTH;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	605a      	str	r2, [r3, #4]

}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <Cbus_Read_Byte_stream>:

 */



void Cbus_Read_Byte_stream(SPI_TypeDef *SPI_PORT,uint8_t Addr,uint8_t *pdata,uint16_t num_of_bytes_to_read){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	461a      	mov	r2, r3
 8000888:	460b      	mov	r3, r1
 800088a:	72fb      	strb	r3, [r7, #11]
 800088c:	4613      	mov	r3, r2
 800088e:	813b      	strh	r3, [r7, #8]

	uint16_t i=0;
 8000890:	2300      	movs	r3, #0
 8000892:	82fb      	strh	r3, [r7, #22]

	//uint8_t received_data = 0;
	while(CBUS_BUSY(SPI_PORT));
 8000894:	bf00      	nop
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff fe2a 	bl	80004f0 <CBUS_BUSY>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f9      	bne.n	8000896 <Cbus_Read_Byte_stream+0x1a>
	while(CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 80008a2:	e004      	b.n	80008ae <Cbus_Read_Byte_stream+0x32>
		{
			uint16_t junk=CBUS_ReceiveFrame(SPI_PORT);
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f000 f996 	bl	8000bd6 <CBUS_ReceiveFrame>
 80008aa:	4603      	mov	r3, r0
 80008ac:	82bb      	strh	r3, [r7, #20]
	while(CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff fe31 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f4      	bne.n	80008a4 <Cbus_Read_Byte_stream+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ba:	b672      	cpsid	i
}
 80008bc:	bf00      	nop
		}
	__disable_irq();
	CBUS_SendFrame(SPI_PORT,Addr);
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f000 f975 	bl	8000bb4 <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 80008ca:	b662      	cpsie	i
}
 80008cc:	bf00      	nop
	__enable_irq();
	while(CBUS_BUSY(SPI_PORT));
 80008ce:	bf00      	nop
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f7ff fe0d 	bl	80004f0 <CBUS_BUSY>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f9      	bne.n	80008d0 <Cbus_Read_Byte_stream+0x54>
	for(i=0;i<=num_of_bytes_to_read;i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	82fb      	strh	r3, [r7, #22]
 80008e0:	e027      	b.n	8000932 <Cbus_Read_Byte_stream+0xb6>
		CBUS_SendFrame(SPI_PORT,i);
 80008e2:	8afb      	ldrh	r3, [r7, #22]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f964 	bl	8000bb4 <CBUS_SendFrame>
		while(CBUS_BUSY(SPI_PORT));
 80008ec:	bf00      	nop
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff fdfe 	bl	80004f0 <CBUS_BUSY>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f9      	bne.n	80008ee <Cbus_Read_Byte_stream+0x72>
		while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 80008fa:	bf00      	nop
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fe1d 	bl	800053c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <Cbus_Read_Byte_stream+0x80>
		while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 8000908:	bf00      	nop
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f7ff fe03 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f9      	beq.n	800090a <Cbus_Read_Byte_stream+0x8e>
		pdata[i-1]=CBUS_ReceiveFrame(SPI_PORT);
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 f95d 	bl	8000bd6 <CBUS_ReceiveFrame>
 800091c:	4603      	mov	r3, r0
 800091e:	4619      	mov	r1, r3
 8000920:	8afb      	ldrh	r3, [r7, #22]
 8000922:	3b01      	subs	r3, #1
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	b2ca      	uxtb	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<=num_of_bytes_to_read;i++){
 800092c:	8afb      	ldrh	r3, [r7, #22]
 800092e:	3301      	adds	r3, #1
 8000930:	82fb      	strh	r3, [r7, #22]
 8000932:	8afa      	ldrh	r2, [r7, #22]
 8000934:	893b      	ldrh	r3, [r7, #8]
 8000936:	429a      	cmp	r2, r3
 8000938:	d9d3      	bls.n	80008e2 <Cbus_Read_Byte_stream+0x66>
	}


}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Cbus_Read_Word>:
 *
 *
 */


uint16_t Cbus_Read_Word(SPI_TypeDef *SPI_PORT, uint8_t Addr) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]

	uint16_t received_data = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	81fb      	strh	r3, [r7, #14]

	while(CBUS_BUSY(SPI_PORT));
 8000954:	bf00      	nop
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fdca 	bl	80004f0 <CBUS_BUSY>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f9      	bne.n	8000956 <Cbus_Read_Word+0x12>
	while(CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 8000962:	e004      	b.n	800096e <Cbus_Read_Word+0x2a>
	{
		uint16_t junk=CBUS_ReceiveFrame(SPI_PORT);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f936 	bl	8000bd6 <CBUS_ReceiveFrame>
 800096a:	4603      	mov	r3, r0
 800096c:	81bb      	strh	r3, [r7, #12]
	while(CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT))
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fdd1 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f4      	bne.n	8000964 <Cbus_Read_Word+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
}
 800097c:	bf00      	nop
	}
	__disable_irq();

		CBUS_SendFrame(SPI_PORT, Addr);
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	b29b      	uxth	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f915 	bl	8000bb4 <CBUS_SendFrame>
		CBUS_SendFrame(SPI_PORT, 1);
 800098a:	2101      	movs	r1, #1
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f911 	bl	8000bb4 <CBUS_SendFrame>
		CBUS_SendFrame(SPI_PORT, 2);
 8000992:	2102      	movs	r1, #2
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f90d 	bl	8000bb4 <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 800099a:	b662      	cpsie	i
}
 800099c:	bf00      	nop
	__enable_irq();
	while(CBUS_BUSY(SPI_PORT));
 800099e:	bf00      	nop
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fda5 	bl	80004f0 <CBUS_BUSY>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f9      	bne.n	80009a0 <Cbus_Read_Word+0x5c>
	while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 80009ac:	bf00      	nop
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fdb1 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <Cbus_Read_Word+0x6a>
	received_data = CBUS_ReceiveFrame(SPI_PORT);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f90b 	bl	8000bd6 <CBUS_ReceiveFrame>
 80009c0:	4603      	mov	r3, r0
 80009c2:	81fb      	strh	r3, [r7, #14]
	received_data<<=8;
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	81fb      	strh	r3, [r7, #14]
	while(!CBUS_RX_FIFO_NOT_EMPTY_CHECK(SPI_PORT));
 80009ca:	bf00      	nop
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fda2 	bl	8000516 <CBUS_RX_FIFO_NOT_EMPTY_CHECK>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f9      	beq.n	80009cc <Cbus_Read_Word+0x88>
	received_data |= CBUS_ReceiveFrame(SPI_PORT);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f8fc 	bl	8000bd6 <CBUS_ReceiveFrame>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	81fb      	strh	r3, [r7, #14]
	received_data =swap_uint16(received_data);
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdb9 	bl	8000562 <swap_uint16>
 80009f0:	4603      	mov	r3, r0
 80009f2:	81fb      	strh	r3, [r7, #14]
	return received_data;
 80009f4:	89fb      	ldrh	r3, [r7, #14]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <Cbus_Write_Byte_stream>:
################################

 *
 */

void Cbus_Write_Byte_stream(SPI_TypeDef *SPI_PORT, uint8_t Addr,uint8_t *pdata,uint16_t num_of_bytes_to_write){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	72fb      	strb	r3, [r7, #11]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	813b      	strh	r3, [r7, #8]
	uint16_t i;
//	__disable_irq();
	while(CBUS_BUSY(SPI_PORT));
 8000a12:	bf00      	nop
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fd6b 	bl	80004f0 <CBUS_BUSY>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1f9      	bne.n	8000a14 <Cbus_Write_Byte_stream+0x16>
	CBUS_SendFrame(SPI_PORT, Addr);
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f000 f8c4 	bl	8000bb4 <CBUS_SendFrame>
	while(CBUS_BUSY(SPI_PORT));
 8000a2c:	bf00      	nop
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fd5e 	bl	80004f0 <CBUS_BUSY>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f9      	bne.n	8000a2e <Cbus_Write_Byte_stream+0x30>
	while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 8000a3a:	bf00      	nop
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff fd7d 	bl	800053c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <Cbus_Write_Byte_stream+0x3e>
	for(i=0;i<=num_of_bytes_to_write;i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	82fb      	strh	r3, [r7, #22]
 8000a4c:	e019      	b.n	8000a82 <Cbus_Write_Byte_stream+0x84>
	{
		CBUS_SendFrame(SPI_PORT,pdata[i]);
 8000a4e:	8afb      	ldrh	r3, [r7, #22]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f000 f8aa 	bl	8000bb4 <CBUS_SendFrame>
		while(CBUS_BUSY(SPI_PORT));
 8000a60:	bf00      	nop
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff fd44 	bl	80004f0 <CBUS_BUSY>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f9      	bne.n	8000a62 <Cbus_Write_Byte_stream+0x64>
		while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 8000a6e:	bf00      	nop
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fd63 	bl	800053c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f9      	beq.n	8000a70 <Cbus_Write_Byte_stream+0x72>
	for(i=0;i<=num_of_bytes_to_write;i++)
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	82fb      	strh	r3, [r7, #22]
 8000a82:	8afa      	ldrh	r2, [r7, #22]
 8000a84:	893b      	ldrh	r3, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d9e1      	bls.n	8000a4e <Cbus_Write_Byte_stream+0x50>
	}
	 return;
 8000a8a:	bf00      	nop
}
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <CbusWriteByte>:





void  CbusWriteByte(SPI_TypeDef *SPI_PORT, uint32_t Addr, uint32_t data){
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]

	   uint8_t    wVal;

	    wVal=Addr;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	75fb      	strb	r3, [r7, #23]
	    //__disable_irq();
	        CBUS_SendFrame(SPI_PORT,wVal);
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 f883 	bl	8000bb4 <CBUS_SendFrame>
	        while(CBUS_BUSY(SPI_PORT));
 8000aae:	bf00      	nop
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff fd1d 	bl	80004f0 <CBUS_BUSY>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f9      	bne.n	8000ab0 <CbusWriteByte+0x1e>
	        while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 8000abc:	bf00      	nop
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fd3c 	bl	800053c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <CbusWriteByte+0x2c>
	        wVal=(uint16_t)data;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	75fb      	strb	r3, [r7, #23]
	        CBUS_SendFrame(SPI_PORT,wVal);
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f000 f86d 	bl	8000bb4 <CBUS_SendFrame>
	        while(CBUS_BUSY(SPI_PORT));
 8000ada:	bf00      	nop
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff fd07 	bl	80004f0 <CBUS_BUSY>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f9      	bne.n	8000adc <CbusWriteByte+0x4a>
	      	while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));
 8000ae8:	bf00      	nop
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fd26 	bl	800053c <CBUS_TX_BUFFER_EMPTY_CHECK>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f9      	beq.n	8000aea <CbusWriteByte+0x58>
	    //__enable_irq();
	    return;
 8000af6:	bf00      	nop


}
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <CbusWriteRegister>:

 *
 */

void CbusWriteRegister(SPI_TypeDef *SPI_PORT, uint8_t Addr, uint16_t data) ///working
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	803b      	strh	r3, [r7, #0]
	uint16_t swapped = swap_uint16(data);
 8000b0e:	883b      	ldrh	r3, [r7, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fd26 	bl	8000562 <swap_uint16>
 8000b16:	4603      	mov	r3, r0
 8000b18:	81fb      	strh	r3, [r7, #14]
	uint8_t address_and_Value[3];
	uint8_t address = Addr;
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	737b      	strb	r3, [r7, #13]
	address_and_Value[2] = address;
 8000b1e:	7b7b      	ldrb	r3, [r7, #13]
 8000b20:	72bb      	strb	r3, [r7, #10]
	address_and_Value[1] = (swapped & 0xff);
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	727b      	strb	r3, [r7, #9]
	address_and_Value[0] = ((swapped >> 8) & (0xff));
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	723b      	strb	r3, [r7, #8]
	//while(CBUS_BUSY(SPI_PORT));

	while (CBUS_BUSY(SPI_PORT)) {
 8000b32:	bf00      	nop
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fcdb 	bl	80004f0 <CBUS_BUSY>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f9      	bne.n	8000b34 <CbusWriteRegister+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
	};
	__disable_irq();
	CBUS_SendFrame(SPI_PORT, address_and_Value[2]);
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f832 	bl	8000bb4 <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[1]);
 8000b50:	7a7b      	ldrb	r3, [r7, #9]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f82c 	bl	8000bb4 <CBUS_SendFrame>
	CBUS_SendFrame(SPI_PORT, address_and_Value[0]);
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f826 	bl	8000bb4 <CBUS_SendFrame>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b68:	b662      	cpsie	i
}
 8000b6a:	bf00      	nop
	__enable_irq();
	while (CBUS_BUSY(SPI_PORT)) {
 8000b6c:	bf00      	nop
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fcbe 	bl	80004f0 <CBUS_BUSY>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <CbusWriteRegister+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7a:	b662      	cpsie	i
}
 8000b7c:	bf00      	nop
	};
	__enable_irq();
	return;
 8000b7e:	bf00      	nop

}
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Cbus_Write_no_data>:
################################

 *
 */

void Cbus_Write_no_data(SPI_TypeDef *SPI_PORT, uint8_t addr) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
	while (CBUS_BUSY(SPI_PORT));
 8000b92:	bf00      	nop
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fcab 	bl	80004f0 <CBUS_BUSY>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f9      	bne.n	8000b94 <Cbus_Write_no_data+0xe>
	CBUS_SendFrame(SPI_PORT, addr);
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f804 	bl	8000bb4 <CBUS_SendFrame>
	return;
 8000bac:	bf00      	nop
}
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <CBUS_SendFrame>:
 */



void CBUS_SendFrame(SPI_TypeDef *SPI_PORT, uint16_t tx_data)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]

	*((volatile uint8_t*) & SPI_PORT->DR )= tx_data;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	330c      	adds	r3, #12
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	701a      	strb	r2, [r3, #0]
	//SPI_PORT->DR = tx_data;
//	while(CBUS_BUSY(SPI_PORT));
//	while(!CBUS_TX_BUFFER_EMPTY_CHECK(SPI_PORT));


}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <CBUS_ReceiveFrame>:

 *
 */

uint16_t CBUS_ReceiveFrame(SPI_TypeDef *SPI_PORT)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	//	return (uint8_t*)(SPI_PORT->DR);
	return (uint16_t)(SPI_PORT->DR);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	b29b      	uxth	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <CBUS_ENABLE>:

static inline void CBUS_ENABLE(SPI_TypeDef *SPI_PORT){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	SPI_PORT->CR1 |= SPI_CR1_SPE;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	//  char check[5];
	/* USER CODE END 1 */

	uint8_t address = 0xcd;
 8000c16:	23cd      	movs	r3, #205	; 0xcd
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint16_t address_casted = (uint16_t)address;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	80bb      	strh	r3, [r7, #4]

	UNITY_BEGIN();
 8000c1e:	4861      	ldr	r0, [pc, #388]	; (8000da4 <main+0x194>)
 8000c20:	f003 fc98 	bl	8004554 <UnityBegin>
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c24:	f000 fc6b 	bl	80014fe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c28:	f000 f8c6 	bl	8000db8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c2c:	f000 f9c2 	bl	8000fb4 <MX_GPIO_Init>
	CBUS_INIT();
 8000c30:	f7ff fcac 	bl	800058c <CBUS_INIT>
	MX_LPUART1_UART_Init();
 8000c34:	f000 f924 	bl	8000e80 <MX_LPUART1_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000c38:	f000 f98e 	bl	8000f58 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000c3c:	f000 f94e 	bl	8000edc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	//enable_codec_boot_control_gpios();
	//set_boot_en1_en2_high();
	enable_timer6();
 8000c40:	f000 fbf4 	bl	800142c <enable_timer6>
	Cbus_Config(SPI3);
 8000c44:	4858      	ldr	r0, [pc, #352]	; (8000da8 <main+0x198>)
 8000c46:	f7ff fdc7 	bl	80007d8 <Cbus_Config>
	CBUS_ENABLE(SPI3);
 8000c4a:	4857      	ldr	r0, [pc, #348]	; (8000da8 <main+0x198>)
 8000c4c:	f7ff ffd0 	bl	8000bf0 <CBUS_ENABLE>

	CBUS_CHIP_SElECT_HIGH();
 8000c50:	f7ff fdb2 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>

	HAL_Delay(30);
 8000c54:	201e      	movs	r0, #30
 8000c56:	f000 fcc7 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000c5a:	f7ff fd9d 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
	Cbus_Write_no_data(SPI3, reset);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4851      	ldr	r0, [pc, #324]	; (8000da8 <main+0x198>)
 8000c62:	f7ff ff90 	bl	8000b86 <Cbus_Write_no_data>
	CBUS_CHIP_SElECT_HIGH();
 8000c66:	f7ff fda7 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(10000);
	HAL_Delay(100);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f000 fcbc 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000c70:	f7ff fd92 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, _1F, 0xC107);
 8000c74:	f24c 1207 	movw	r2, #49415	; 0xc107
 8000c78:	211f      	movs	r1, #31
 8000c7a:	484b      	ldr	r0, [pc, #300]	; (8000da8 <main+0x198>)
 8000c7c:	f7ff ff3f 	bl	8000afe <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000c80:	f7ff fd9a 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f000 fcaf 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000c8a:	f7ff fd85 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
	CbusWriteRegister(SPI3, _1D, 0x0006);
 8000c8e:	2206      	movs	r2, #6
 8000c90:	211d      	movs	r1, #29
 8000c92:	4845      	ldr	r0, [pc, #276]	; (8000da8 <main+0x198>)
 8000c94:	f7ff ff33 	bl	8000afe <CbusWriteRegister>
	CBUS_CHIP_SElECT_HIGH();
 8000c98:	f7ff fd8e 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
	HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f000 fca3 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000ca2:	f7ff fd79 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
//Cbus_Write_Byte(SPI3,_0A , 0x00);
	CbusWriteByte(SPI3, _0A, 0x00);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210a      	movs	r1, #10
 8000caa:	483f      	ldr	r0, [pc, #252]	; (8000da8 <main+0x198>)
 8000cac:	f7ff fef1 	bl	8000a92 <CbusWriteByte>
	CBUS_CHIP_SElECT_HIGH();
 8000cb0:	f7ff fd82 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(100000);
	HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f000 fc97 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000cba:	f7ff fd6d 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
//Cbus_Write_Byte(SPI3,_09 , 0x0F);
	CbusWriteByte(SPI3, _09, 0x0F);
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	2109      	movs	r1, #9
 8000cc2:	4839      	ldr	r0, [pc, #228]	; (8000da8 <main+0x198>)
 8000cc4:	f7ff fee5 	bl	8000a92 <CbusWriteByte>
	CBUS_CHIP_SElECT_HIGH();
 8000cc8:	f7ff fd76 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(100000);
	HAL_Delay(50);
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f000 fc8b 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000cd2:	f7ff fd61 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
//Cbus_Write_Byte(SPI3,VCFG , 0x34);
	CbusWriteByte(SPI3, VCFG, 0x34);
 8000cd6:	2234      	movs	r2, #52	; 0x34
 8000cd8:	2107      	movs	r1, #7
 8000cda:	4833      	ldr	r0, [pc, #204]	; (8000da8 <main+0x198>)
 8000cdc:	f7ff fed9 	bl	8000a92 <CbusWriteByte>
	CBUS_CHIP_SElECT_HIGH();
 8000ce0:	f7ff fd6a 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(100000);
	HAL_Delay(100);
 8000ce4:	2064      	movs	r0, #100	; 0x64
 8000ce6:	f000 fc7f 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000cea:	f7ff fd55 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
//Cbus_Write_Byte(SPI3,AIG, 0x8F);
	CbusWriteByte(SPI3, AIG, 0x8F);
 8000cee:	228f      	movs	r2, #143	; 0x8f
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	482d      	ldr	r0, [pc, #180]	; (8000da8 <main+0x198>)
 8000cf4:	f7ff fecd 	bl	8000a92 <CbusWriteByte>
	CBUS_CHIP_SElECT_HIGH();
 8000cf8:	f7ff fd5e 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(100000);
	HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fc73 	bl	80015e8 <HAL_Delay>

	CBUS_CHIP_SElECT_LOW();
 8000d02:	f7ff fd49 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
//Cbus_Write_Byte(SPI3,AOG , 0x0A);
	CbusWriteByte(SPI3, AOG, 0x05);
 8000d06:	2205      	movs	r2, #5
 8000d08:	2106      	movs	r1, #6
 8000d0a:	4827      	ldr	r0, [pc, #156]	; (8000da8 <main+0x198>)
 8000d0c:	f7ff fec1 	bl	8000a92 <CbusWriteByte>
	CBUS_CHIP_SElECT_HIGH();
 8000d10:	f7ff fd52 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
//Delay_US(100000);
	HAL_Delay(100);
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	f000 fc67 	bl	80015e8 <HAL_Delay>

	 CBUS_CHIP_SElECT_LOW();
 8000d1a:	f7ff fd3d 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
	 CbusWriteRegister(SPI3, VCTRL, 0x0007);
 8000d1e:	2207      	movs	r2, #7
 8000d20:	2111      	movs	r1, #17
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <main+0x198>)
 8000d24:	f7ff feeb 	bl	8000afe <CbusWriteRegister>
	 CBUS_CHIP_SElECT_HIGH();
 8000d28:	f7ff fd46 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
	 //Delay_US(100000);
	 HAL_Delay(80);
 8000d2c:	2050      	movs	r0, #80	; 0x50
 8000d2e:	f000 fc5b 	bl	80015e8 <HAL_Delay>

	 CBUS_CHIP_SElECT_LOW();
 8000d32:	f7ff fd31 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
	  x = Cbus_Read_Word(SPI3, VCTR);
 8000d36:	213c      	movs	r1, #60	; 0x3c
 8000d38:	481b      	ldr	r0, [pc, #108]	; (8000da8 <main+0x198>)
 8000d3a:	f7ff fe03 	bl	8000944 <Cbus_Read_Word>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <main+0x19c>)
 8000d44:	801a      	strh	r2, [r3, #0]
	 CBUS_CHIP_SElECT_HIGH();
 8000d46:	f7ff fd37 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
	 HAL_Delay(80);
 8000d4a:	2050      	movs	r0, #80	; 0x50
 8000d4c:	f000 fc4c 	bl	80015e8 <HAL_Delay>
		 CBUS_CHIP_SElECT_LOW();
		 Cbus_Write_Byte_stream(SPI3, 0x10, arr, 10);
		 CBUS_CHIP_SElECT_HIGH();

*/
		Delay_US(80000);
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <main+0x1a0>)
 8000d52:	f000 fb95 	bl	8001480 <Delay_US>

		CBUS_CHIP_SElECT_LOW();
 8000d56:	f7ff fd1f 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
		//Cbus_Read_Byte_stream(SPI3,VCTR,arr,2);
		uint16_t y = Cbus_Read_Word(SPI3, status);
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <main+0x198>)
 8000d5e:	f7ff fdf1 	bl	8000944 <Cbus_Read_Word>
 8000d62:	4603      	mov	r3, r0
 8000d64:	807b      	strh	r3, [r7, #2]
		CBUS_CHIP_SElECT_HIGH();
 8000d66:	f7ff fd27 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
		HAL_Delay(2);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f000 fc3c 	bl	80015e8 <HAL_Delay>
		if((y & 0x0001) == 0x0001){
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0ea      	beq.n	8000d50 <main+0x140>

		  CBUS_CHIP_SElECT_LOW();
 8000d7a:	f7ff fd0d 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
		  Cbus_Read_Byte_stream(SPI3, enc, arr, 6);
 8000d7e:	2306      	movs	r3, #6
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <main+0x1a4>)
 8000d82:	2130      	movs	r1, #48	; 0x30
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <main+0x198>)
 8000d86:	f7ff fd79 	bl	800087c <Cbus_Read_Byte_stream>
		  CBUS_CHIP_SElECT_HIGH();
 8000d8a:	f7ff fd15 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>



		  CBUS_CHIP_SElECT_LOW();
 8000d8e:	f7ff fd03 	bl	8000798 <CBUS_CHIP_SElECT_LOW>
		  Cbus_Write_Byte_stream(SPI3, 0x10, arr, 6);
 8000d92:	2306      	movs	r3, #6
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <main+0x1a4>)
 8000d96:	2110      	movs	r1, #16
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <main+0x198>)
 8000d9a:	f7ff fe30 	bl	80009fe <Cbus_Write_Byte_stream>
		  CBUS_CHIP_SElECT_HIGH();
 8000d9e:	f7ff fd0b 	bl	80007b8 <CBUS_CHIP_SElECT_HIGH>
	{
 8000da2:	e7d5      	b.n	8000d50 <main+0x140>
 8000da4:	08004618 	.word	0x08004618
 8000da8:	40003c00 	.word	0x40003c00
 8000dac:	20000624 	.word	0x20000624
 8000db0:	00013880 	.word	0x00013880
 8000db4:	20000028 	.word	0x20000028

08000db8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	; 0x58
 8000dbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2244      	movs	r2, #68	; 0x44
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fc12 	bl	80045f0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dde:	f001 f81d 	bl	8001e1c <HAL_PWREx_ControlVoltageScaling>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000de8:	f000 f97c 	bl	80010e4 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000dec:	f000 fff8 	bl	8001de0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <SystemClock_Config+0xc4>)
 8000df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df6:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <SystemClock_Config+0xc4>)
 8000df8:	f023 0318 	bic.w	r3, r3, #24
 8000dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000e00:	2314      	movs	r3, #20
 8000e02:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000e20:	2328      	movs	r3, #40	; 0x28
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f867 	bl	8001f08 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000e40:	f000 f950 	bl	80010e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e54:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fc6c 	bl	800273c <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8000e6a:	f000 f93b 	bl	80010e4 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000e6e:	f002 f985 	bl	800317c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	; 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_LPUART1_UART_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_LPUART1_UART_Init+0x58>)
 8000e8e:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e96:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_LPUART1_UART_Init+0x50>)
 8000ebe:	f002 fbde 	bl	800367e <HAL_UART_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_LPUART1_UART_Init+0x4c>
	{
		Error_Handler();
 8000ec8:	f000 f90c 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000030 	.word	0x20000030
 8000ed4:	40008000 	.word	0x40008000
 8000ed8:	00033324 	.word	0x00033324

08000edc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_SPI1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000efa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI1_Init+0x74>)
 8000f3c:	f002 fafc 	bl	8003538 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000f46:	f000 f8cd 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000b4 	.word	0x200000b4
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f62:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f66:	2206      	movs	r2, #6
 8000f68:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9c:	f000 fdd8 	bl	8001b50 <HAL_PCD_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 8000fa6:	f000 f89d 	bl	80010e4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000118 	.word	0x20000118

08000fb4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <MX_GPIO_Init+0x120>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a35      	ldr	r2, [pc, #212]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_GPIO_Init+0x120>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
	HAL_PWREx_EnableVddIO2();
 8001042:	f000 ff51 	bl	8001ee8 <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800104c:	4822      	ldr	r0, [pc, #136]	; (80010d8 <MX_GPIO_Init+0x124>)
 800104e:	f000 fd67 	bl	8001b20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	4821      	ldr	r0, [pc, #132]	; (80010dc <MX_GPIO_Init+0x128>)
 8001058:	f000 fd62 	bl	8001b20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001066:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <MX_GPIO_Init+0x12c>)
 8001074:	f000 fbc2 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8001078:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800107c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <MX_GPIO_Init+0x124>)
 8001092:	f000 fbb3 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001096:	2320      	movs	r3, #32
 8001098:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0x128>)
 80010aa:	f000 fba7 	bl	80017fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_GPIO_Init+0x128>)
 80010c6:	f000 fb99 	bl	80017fc <HAL_GPIO_Init>

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48001800 	.word	0x48001800
 80010e0:	48000800 	.word	0x48000800

080010e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6593      	str	r3, [r2, #88]	; 0x58
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ac      	sub	sp, #176	; 0xb0
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	228c      	movs	r2, #140	; 0x8c
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fa49 	bl	80045f0 <memset>
  if(huart->Instance==LPUART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_UART_MspInit+0xb4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d13d      	bne.n	80011e4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001168:	2320      	movs	r3, #32
 800116a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800116c:	2300      	movs	r3, #0
 800116e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fd05 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001180:	f7ff ffb0 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0xb8>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80011b4:	f000 fe98 	bl	8001ee8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011d2:	2308      	movs	r3, #8
 80011d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_MspInit+0xbc>)
 80011e0:	f000 fb0c 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	37b0      	adds	r7, #176	; 0xb0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40008000 	.word	0x40008000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48001800 	.word	0x48001800

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_SPI_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d128      	bne.n	800126c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_SPI_MspInit+0x80>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6613      	str	r3, [r2, #96]	; 0x60
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_SPI_MspInit+0x80>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800124a:	23c2      	movs	r3, #194	; 0xc2
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125a:	2305      	movs	r3, #5
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f000 fac8 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013000 	.word	0x40013000
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ae      	sub	sp, #184	; 0xb8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	228c      	movs	r2, #140	; 0x8c
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f9a7 	bl	80045f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012aa:	d17c      	bne.n	80013a6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012c2:	2318      	movs	r3, #24
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fc51 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012e8:	f7ff fefc 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001304:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800131e:	230a      	movs	r3, #10
 8001320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f000 fa65 	bl	80017fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fa54 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 800135a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d114      	bne.n	80013a2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6593      	str	r3, [r2, #88]	; 0x58
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001390:	f000 fd9a 	bl	8001ec8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <HAL_PCD_MspInit+0x134>)
 800139a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a0:	e001      	b.n	80013a6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013a2:	f000 fd91 	bl	8001ec8 <HAL_PWREx_EnableVddUSB>
}
 80013a6:	bf00      	nop
 80013a8:	37b8      	adds	r7, #184	; 0xb8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f8d2 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <enable_timer6>:


#include <timer6_delay.h>

volatile int myTicks=0;
void enable_timer6(){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

	RCC->APB1ENR1|=RCC_APB1ENR1_TIM2EN;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <enable_timer6+0x4c>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <enable_timer6+0x4c>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->PSC =40-1;
 800143c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001440:	2227      	movs	r2, #39	; 0x27
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR =0xfffff;
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <enable_timer6+0x50>)
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 800144c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

	while (!(TIM2->SR & (1<<0)));
 800145c:	bf00      	nop
 800145e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f8      	beq.n	800145e <enable_timer6+0x32>

}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	000fffff 	.word	0x000fffff

08001480 <Delay_US>:



void Delay_US(uint32_t US){
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 8001488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < US);
 8001490:	bf00      	nop
 8001492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	d8f9      	bhi.n	8001492 <Delay_US+0x12>
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff ffaa 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f003 f865 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff fb97 	bl	8000c10 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014f0:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 80014f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014f8:	200006b0 	.word	0x200006b0

080014fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>

080014fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f943 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f80e 	bl	8001530 <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e001      	b.n	8001524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001520:	f7ff fde6 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001524:	79fb      	ldrb	r3, [r7, #7]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_InitTick+0x6c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d023      	beq.n	800158c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_InitTick+0x70>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f941 	bl	80017e2 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d809      	bhi.n	8001580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f919 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_InitTick+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e007      	b.n	8001590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e001      	b.n	8001590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000628 	.word	0x20000628

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000628 	.word	0x20000628

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff5c 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffb0 	bl	8001750 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e166      	b.n	8001ada <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8158 	beq.w	8001ad4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d005      	beq.n	800183c <HAL_GPIO_Init+0x40>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d130      	bne.n	800189e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001872:	2201      	movs	r2, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 0201 	and.w	r2, r3, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d017      	beq.n	80018da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d123      	bne.n	800192e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	6939      	ldr	r1, [r7, #16]
 800192a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0203 	and.w	r2, r3, #3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80b2 	beq.w	8001ad4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6613      	str	r3, [r2, #96]	; 0x60
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_GPIO_Init+0x2fc>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001988:	4a5c      	ldr	r2, [pc, #368]	; (8001afc <HAL_GPIO_Init+0x300>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b2:	d02b      	beq.n	8001a0c <HAL_GPIO_Init+0x210>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_GPIO_Init+0x304>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d025      	beq.n	8001a08 <HAL_GPIO_Init+0x20c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <HAL_GPIO_Init+0x308>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d01f      	beq.n	8001a04 <HAL_GPIO_Init+0x208>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d019      	beq.n	8001a00 <HAL_GPIO_Init+0x204>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4f      	ldr	r2, [pc, #316]	; (8001b0c <HAL_GPIO_Init+0x310>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x200>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4e      	ldr	r2, [pc, #312]	; (8001b10 <HAL_GPIO_Init+0x314>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1fc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <HAL_GPIO_Init+0x318>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1f8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_GPIO_Init+0x31c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1f4>
 80019ec:	2307      	movs	r3, #7
 80019ee:	e00e      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 80019f0:	2308      	movs	r3, #8
 80019f2:	e00c      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 80019f4:	2306      	movs	r3, #6
 80019f6:	e00a      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e008      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x212>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x300>)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a50:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_GPIO_Init+0x320>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae91 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	48000400 	.word	0x48000400
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000c00 	.word	0x48000c00
 8001b0c:	48001000 	.word	0x48001000
 8001b10:	48001400 	.word	0x48001400
 8001b14:	48001800 	.word	0x48001800
 8001b18:	48001c00 	.word	0x48001c00
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b08f      	sub	sp, #60	; 0x3c
 8001b54:	af0a      	add	r7, sp, #40	; 0x28
 8001b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e116      	b.n	8001d90 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fb7d 	bl	800127c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fa4e 	bl	8004042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	687e      	ldr	r6, [r7, #4]
 8001bae:	466d      	mov	r5, sp
 8001bb0:	f106 0410 	add.w	r4, r6, #16
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bc4:	1d33      	adds	r3, r6, #4
 8001bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f002 fa0e 	bl	8003fea <USB_CoreInit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0d7      	b.n	8001d90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fa3c 	bl	8004064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e04a      	b.n	8001c88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	333d      	adds	r3, #61	; 0x3d
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	333c      	adds	r3, #60	; 0x3c
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	b298      	uxth	r0, r3
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3344      	adds	r3, #68	; 0x44
 8001c2e:	4602      	mov	r2, r0
 8001c30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3340      	adds	r3, #64	; 0x40
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3348      	adds	r3, #72	; 0x48
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	334c      	adds	r3, #76	; 0x4c
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3354      	adds	r3, #84	; 0x54
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	3301      	adds	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d3af      	bcc.n	8001bf2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e044      	b.n	8001d22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3b5      	bcc.n	8001c98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	687e      	ldr	r6, [r7, #4]
 8001d34:	466d      	mov	r5, sp
 8001d36:	f106 0410 	add.w	r4, r6, #16
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d4a:	1d33      	adds	r3, r6, #4
 8001d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	f002 f9d4 	bl	80040fc <USB_DevInit>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e014      	b.n	8001d90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f80a 	bl	8001d98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 fb80 	bl	800448e <USB_DevDisconnect>

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	f043 0303 	orr.w	r3, r3, #3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40007000 	.word	0x40007000

08001e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40007000 	.word	0x40007000

08001e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2a:	d130      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d038      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2232      	movs	r2, #50	; 0x32
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	e002      	b.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d102      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f2      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d110      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e00f      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d007      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed6:	6053      	str	r3, [r2, #4]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6053      	str	r3, [r2, #4]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f000 bc08 	b.w	800272c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f26:	4b94      	ldr	r3, [pc, #592]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80e4 	beq.w	8002106 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4c>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	f040 808b 	bne.w	8002062 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 8087 	bne.w	8002062 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x64>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e3df      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_RCC_OscConfig+0x7e>
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_OscConfig+0x8a>
 8001f86:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d223      	bcs.n	8001fde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fd92 	bl	8002ac4 <RCC_SetFlashLatencyFromMSIRange>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e3c0      	b.n	800272c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a72      	ldr	r2, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	496d      	ldr	r1, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4968      	ldr	r1, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e025      	b.n	800202a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fde:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4960      	ldr	r1, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	495b      	ldr	r1, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fd52 	bl	8002ac4 <RCC_SetFlashLatencyFromMSIRange>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e380      	b.n	800272c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202a:	f000 fc87 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4950      	ldr	r1, [pc, #320]	; (800217c <HAL_RCC_OscConfig+0x274>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_RCC_OscConfig+0x278>)
 8002048:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fa6e 	bl	8001530 <HAL_InitTick>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d052      	beq.n	8002104 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	e364      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d032      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002076:	f7ff faab 	bl	80015d0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800207e:	f7ff faa7 	bl	80015d0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e34d      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4930      	ldr	r1, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	492b      	ldr	r1, [pc, #172]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e01a      	b.n	8002106 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fa78 	bl	80015d0 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e4:	f7ff fa74 	bl	80015d0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e31a      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1dc>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d073      	beq.n	80021fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x21c>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d10e      	bne.n	800213c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d063      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d15f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e2f7      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x24c>
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e025      	b.n	80021a0 <HAL_RCC_OscConfig+0x298>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d114      	bne.n	8002188 <HAL_RCC_OscConfig+0x280>
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a02      	ldr	r2, [pc, #8]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0x298>
 8002178:	40021000 	.word	0x40021000
 800217c:	0800462c 	.word	0x0800462c
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004
 8002188:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a9f      	ldr	r2, [pc, #636]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a9c      	ldr	r2, [pc, #624]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff fa12 	bl	80015d0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fa0e 	bl	80015d0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e2b4      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c2:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2a8>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f9fe 	bl	80015d0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff f9fa 	bl	80015d0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e2a0      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2d0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d060      	beq.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x310>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d119      	bne.n	8002246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d116      	bne.n	8002246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002218:	4b7c      	ldr	r3, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_OscConfig+0x328>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e27d      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	4973      	ldr	r1, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	e040      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d023      	beq.n	8002296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f9b9 	bl	80015d0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff f9b5 	bl	80015d0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e25b      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	495f      	ldr	r1, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	e018      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a5c      	ldr	r2, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800229c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f995 	bl	80015d0 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff f991 	bl	80015d0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e237      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d03c      	beq.n	800234e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01c      	beq.n	8002316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f970 	bl	80015d0 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f96c 	bl	80015d0 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e212      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ef      	beq.n	80022f4 <HAL_RCC_OscConfig+0x3ec>
 8002314:	e01b      	b.n	800234e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231c:	4a3b      	ldr	r2, [pc, #236]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7ff f953 	bl	80015d0 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7ff f94f 	bl	80015d0 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1f5      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ef      	bne.n	800232e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80a6 	beq.w	80024a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6593      	str	r3, [r2, #88]	; 0x58
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d118      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a0:	f7ff f916 	bl	80015d0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7ff f912 	bl	80015d0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1b8      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4d8>
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023de:	e029      	b.n	8002434 <HAL_RCC_OscConfig+0x52c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d115      	bne.n	8002414 <HAL_RCC_OscConfig+0x50c>
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a03      	ldr	r2, [pc, #12]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x52c>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	4b9d      	ldr	r3, [pc, #628]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a9c      	ldr	r2, [pc, #624]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002424:	4b99      	ldr	r3, [pc, #612]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a98      	ldr	r2, [pc, #608]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff f8c8 	bl	80015d0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7ff f8c4 	bl	80015d0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e168      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ed      	beq.n	8002444 <HAL_RCC_OscConfig+0x53c>
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7ff f8b1 	bl	80015d0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff f8ad 	bl	80015d0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e151      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ed      	bne.n	8002472 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b7b      	ldr	r3, [pc, #492]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	4a7a      	ldr	r2, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03c      	beq.n	800252e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024bc:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c2:	4a72      	ldr	r2, [pc, #456]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff f880 	bl	80015d0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d4:	f7ff f87c 	bl	80015d0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e122      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024e6:	4b69      	ldr	r3, [pc, #420]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x5cc>
 80024f4:	e01b      	b.n	800252e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff f863 	bl	80015d0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250e:	f7ff f85f 	bl	80015d0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e105      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002520:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80f9 	beq.w	800272a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b02      	cmp	r3, #2
 800253e:	f040 80cf 	bne.w	80026e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002542:	4b52      	ldr	r3, [pc, #328]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	429a      	cmp	r2, r3
 8002554:	d12c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	3b01      	subs	r3, #1
 8002562:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d123      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d11b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d113      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	3b01      	subs	r3, #1
 8002596:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d109      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d071      	beq.n	8002694 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d068      	beq.n	8002688 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0ac      	b.n	800272c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2d      	ldr	r2, [pc, #180]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80025d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025de:	f7fe fff7 	bl	80015d0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe fff3 	bl	80015d0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e099      	b.n	800272c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x784>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x788>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002614:	3a01      	subs	r2, #1
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0552      	lsls	r2, r2, #21
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002632:	0852      	lsrs	r2, r2, #1
 8002634:	3a01      	subs	r2, #1
 8002636:	0652      	lsls	r2, r2, #25
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800263e:	06d2      	lsls	r2, r2, #27
 8002640:	430a      	orrs	r2, r1
 8002642:	4912      	ldr	r1, [pc, #72]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002644:	4313      	orrs	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_OscConfig+0x784>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002660:	f7fe ffb6 	bl	80015d0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe ffb2 	bl	80015d0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e058      	b.n	800272c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_OscConfig+0x784>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002686:	e050      	b.n	800272a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04f      	b.n	800272c <HAL_RCC_OscConfig+0x824>
 800268c:	40021000 	.word	0x40021000
 8002690:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d144      	bne.n	800272a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b8:	f7fe ff8a 	bl	80015d0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe ff86 	bl	80015d0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e02c      	b.n	800272c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x7b8>
 80026de:	e024      	b.n	800272a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d01f      	beq.n	8002726 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 80026ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe ff6d 	bl	80015d0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe ff69 	bl	80015d0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4905      	ldr	r1, [pc, #20]	; (8002734 <HAL_RCC_OscConfig+0x82c>)
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_OscConfig+0x830>)
 8002720:	4013      	ands	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e001      	b.n	800272a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	feeefffc 	.word	0xfeeefffc

0800273c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0e7      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4970      	ldr	r1, [pc, #448]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0cf      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4960      	ldr	r1, [pc, #384]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d04c      	beq.n	8002854 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b5a      	ldr	r3, [pc, #360]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d121      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0a6      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b54      	ldr	r3, [pc, #336]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e09a      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f2:	4b4e      	ldr	r3, [pc, #312]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08e      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002802:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e086      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4943      	ldr	r1, [pc, #268]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fed4 	bl	80015d0 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe fed0 	bl	80015d0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e06e      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	429a      	cmp	r2, r3
 800286e:	d208      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	492b      	ldr	r1, [pc, #172]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d210      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	4923      	ldr	r1, [pc, #140]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_ClockConfig+0x1ec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e036      	b.n	8002920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4918      	ldr	r1, [pc, #96]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4910      	ldr	r1, [pc, #64]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f0:	f000 f824 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	490b      	ldr	r1, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1f4>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1fc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fe0b 	bl	8001530 <HAL_InitTick>
 800291a:	4603      	mov	r3, r0
 800291c:	72fb      	strb	r3, [r7, #11]

  return status;
 800291e:	7afb      	ldrb	r3, [r7, #11]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40022000 	.word	0x40022000
 800292c:	40021000 	.word	0x40021000
 8002930:	0800462c 	.word	0x0800462c
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x34>
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d121      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d11e      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e005      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d102      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e004      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d134      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0xac>
 80029e0:	e005      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80029e4:	617b      	str	r3, [r7, #20]
      break;
 80029e6:	e005      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ea:	617b      	str	r3, [r7, #20]
      break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	617b      	str	r3, [r7, #20]
      break;
 80029f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	3301      	adds	r3, #1
 8002a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	fb03 f202 	mul.w	r2, r3, r2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	0e5b      	lsrs	r3, r3, #25
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	3301      	adds	r3, #1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a34:	69bb      	ldr	r3, [r7, #24]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08004644 	.word	0x08004644
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4904      	ldr	r1, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	0800463c 	.word	0x0800463c

08002a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a9c:	f7ff ffda 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0adb      	lsrs	r3, r3, #11
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	0800463c 	.word	0x0800463c

08002ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002adc:	f7ff f990 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002ae0:	6178      	str	r0, [r7, #20]
 8002ae2:	e014      	b.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6593      	str	r3, [r2, #88]	; 0x58
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002afc:	f7ff f980 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b14:	d10b      	bne.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d919      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b20:	d902      	bls.n	8002b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b22:	2302      	movs	r3, #2
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e013      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e010      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d902      	bls.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b34:	2303      	movs	r3, #3
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e00a      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d102      	bne.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e004      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b70      	cmp	r3, #112	; 0x70
 8002b4a:	d101      	bne.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0207 	bic.w	r2, r3, #7
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d041      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba8:	d02a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bae:	d824      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bba:	d81e      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bc6:	e018      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bc8:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd4:	e015      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fadd 	bl	800319c <RCCEx_PLLSAI1_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be6:	e00c      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3320      	adds	r3, #32
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fbc6 	bl	8003380 <RCCEx_PLLSAI2_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf8:	e003      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bfe:	e000      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c16:	4973      	ldr	r1, [pc, #460]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c1e:	e001      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d041      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c38:	d02a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c3e:	d824      	bhi.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c4a:	d81e      	bhi.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d010      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c56:	e018      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c58:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c64:	e015      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fa95 	bl	800319c <RCCEx_PLLSAI1_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c76:	e00c      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3320      	adds	r3, #32
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fb7e 	bl	8003380 <RCCEx_PLLSAI2_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c98:	4b52      	ldr	r3, [pc, #328]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca6:	494f      	ldr	r1, [pc, #316]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a0 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc64 	bl	80015d0 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fe fc60 	bl	80015d0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d1e:	e005      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ef      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d15c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01f      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fc1f 	bl	80015d0 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d94:	e00b      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe fc1b 	bl	80015d0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d902      	bls.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	74fb      	strb	r3, [r7, #19]
            break;
 8002dac:	e006      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ec      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	4904      	ldr	r1, [pc, #16]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df0:	7c7b      	ldrb	r3, [r7, #17]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4ba6      	ldr	r3, [pc, #664]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4aa5      	ldr	r2, [pc, #660]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0e:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f023 0203 	bic.w	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	499c      	ldr	r1, [pc, #624]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e30:	4b97      	ldr	r3, [pc, #604]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 020c 	bic.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	4994      	ldr	r1, [pc, #592]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e52:	4b8f      	ldr	r3, [pc, #572]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	498b      	ldr	r1, [pc, #556]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e74:	4b86      	ldr	r3, [pc, #536]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4983      	ldr	r1, [pc, #524]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e96:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	497a      	ldr	r1, [pc, #488]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb8:	4b75      	ldr	r3, [pc, #468]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4972      	ldr	r1, [pc, #456]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	4969      	ldr	r1, [pc, #420]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	4961      	ldr	r1, [pc, #388]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	4958      	ldr	r1, [pc, #352]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4950      	ldr	r1, [pc, #320]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f62:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4947      	ldr	r1, [pc, #284]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f8a:	f023 0203 	bic.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	493f      	ldr	r1, [pc, #252]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d028      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a31      	ldr	r2, [pc, #196]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd0:	60d3      	str	r3, [r2, #12]
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f8d9 	bl	800319c <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d028      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	491f      	ldr	r1, [pc, #124]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003022:	d106      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302e:	60d3      	str	r3, [r2, #12]
 8003030:	e011      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303a:	d10c      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8aa 	bl	800319c <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003080:	d108      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003082:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a02      	ldr	r2, [pc, #8]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308c:	60d3      	str	r3, [r2, #12]
 800308e:	e013      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003090:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f879 	bl	800319c <RCCEx_PLLSAI1_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02f      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d2:	4929      	ldr	r1, [pc, #164]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	2102      	movs	r1, #2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f856 	bl	800319c <RCCEx_PLLSAI1_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d014      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	74bb      	strb	r3, [r7, #18]
 80030fe:	e011      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d10c      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3320      	adds	r3, #32
 800310e:	2102      	movs	r1, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f935 	bl	8003380 <RCCEx_PLLSAI2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003140:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800316c:	7cbb      	ldrb	r3, [r7, #18]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031aa:	4b74      	ldr	r3, [pc, #464]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031b6:	4b71      	ldr	r3, [pc, #452]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10d      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ce:	4b6b      	ldr	r3, [pc, #428]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
       ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d047      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
 80031e6:	e044      	b.n	8003272 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d018      	beq.n	8003222 <RCCEx_PLLSAI1_Config+0x86>
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d825      	bhi.n	8003240 <RCCEx_PLLSAI1_Config+0xa4>
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d002      	beq.n	80031fe <RCCEx_PLLSAI1_Config+0x62>
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d009      	beq.n	8003210 <RCCEx_PLLSAI1_Config+0x74>
 80031fc:	e020      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11d      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800320e:	e01a      	b.n	8003246 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003210:	4b5a      	ldr	r3, [pc, #360]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003220:	e013      	b.n	800324a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800323e:	e006      	b.n	800324e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      break;
 8003244:	e004      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800324e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003256:	4b49      	ldr	r3, [pc, #292]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	430b      	orrs	r3, r1
 800326c:	4943      	ldr	r1, [pc, #268]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d17c      	bne.n	8003372 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003278:	4b40      	ldr	r3, [pc, #256]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3f      	ldr	r2, [pc, #252]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 800327e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fe f9a4 	bl	80015d0 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800328a:	e009      	b.n	80032a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328c:	f7fe f9a0 	bl	80015d0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	73fb      	strb	r3, [r7, #15]
        break;
 800329e:	e005      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ef      	bne.n	800328c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15f      	bne.n	8003372 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d110      	bne.n	80032da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b8:	4b30      	ldr	r3, [pc, #192]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80032c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	0211      	lsls	r1, r2, #8
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68d2      	ldr	r2, [r2, #12]
 80032ce:	06d2      	lsls	r2, r2, #27
 80032d0:	430a      	orrs	r2, r1
 80032d2:	492a      	ldr	r1, [pc, #168]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	610b      	str	r3, [r1, #16]
 80032d8:	e027      	b.n	800332a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d112      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	0211      	lsls	r1, r2, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6912      	ldr	r2, [r2, #16]
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0552      	lsls	r2, r2, #21
 80032fc:	430a      	orrs	r2, r1
 80032fe:	491f      	ldr	r1, [pc, #124]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	610b      	str	r3, [r1, #16]
 8003304:	e011      	b.n	800332a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800330e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	0211      	lsls	r1, r2, #8
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6952      	ldr	r2, [r2, #20]
 800331c:	0852      	lsrs	r2, r2, #1
 800331e:	3a01      	subs	r2, #1
 8003320:	0652      	lsls	r2, r2, #25
 8003322:	430a      	orrs	r2, r1
 8003324:	4915      	ldr	r1, [pc, #84]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003334:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe f94b 	bl	80015d0 <HAL_GetTick>
 800333a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800333c:	e009      	b.n	8003352 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800333e:	f7fe f947 	bl	80015d0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d902      	bls.n	8003352 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	73fb      	strb	r3, [r7, #15]
          break;
 8003350:	e005      	b.n	800335e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ef      	beq.n	800333e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <RCCEx_PLLSAI1_Config+0x1e0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000

08003380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800338e:	4b69      	ldr	r3, [pc, #420]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800339a:	4b66      	ldr	r3, [pc, #408]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0203 	and.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d10d      	bne.n	80033c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
       ||
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033b2:	4b60      	ldr	r3, [pc, #384]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
       ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d047      	beq.n	8003456 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e044      	b.n	8003456 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d018      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0x86>
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d825      	bhi.n	8003424 <RCCEx_PLLSAI2_Config+0xa4>
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d002      	beq.n	80033e2 <RCCEx_PLLSAI2_Config+0x62>
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d009      	beq.n	80033f4 <RCCEx_PLLSAI2_Config+0x74>
 80033e0:	e020      	b.n	8003424 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033e2:	4b54      	ldr	r3, [pc, #336]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11d      	bne.n	800342a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f2:	e01a      	b.n	800342a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033f4:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d116      	bne.n	800342e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e013      	b.n	800342e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003406:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003412:	4b48      	ldr	r3, [pc, #288]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003422:	e006      	b.n	8003432 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e004      	b.n	8003434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003432:	bf00      	nop
    }

    if(status == HAL_OK)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	430b      	orrs	r3, r1
 8003450:	4938      	ldr	r1, [pc, #224]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d166      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a34      	ldr	r2, [pc, #208]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fe f8b2 	bl	80015d0 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800346e:	e009      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003470:	f7fe f8ae 	bl	80015d0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d902      	bls.n	8003484 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	73fb      	strb	r3, [r7, #15]
        break;
 8003482:	e005      	b.n	8003490 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ef      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d149      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d110      	bne.n	80034be <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6892      	ldr	r2, [r2, #8]
 80034ac:	0211      	lsls	r1, r2, #8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	06d2      	lsls	r2, r2, #27
 80034b4:	430a      	orrs	r2, r1
 80034b6:	491f      	ldr	r1, [pc, #124]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	614b      	str	r3, [r1, #20]
 80034bc:	e011      	b.n	80034e2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	0211      	lsls	r1, r2, #8
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6912      	ldr	r2, [r2, #16]
 80034d4:	0852      	lsrs	r2, r2, #1
 80034d6:	3a01      	subs	r2, #1
 80034d8:	0652      	lsls	r2, r2, #25
 80034da:	430a      	orrs	r2, r1
 80034dc:	4915      	ldr	r1, [pc, #84]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe f86f 	bl	80015d0 <HAL_GetTick>
 80034f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034f4:	e009      	b.n	800350a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f6:	f7fe f86b 	bl	80015d0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d902      	bls.n	800350a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	73fb      	strb	r3, [r7, #15]
          break;
 8003508:	e005      	b.n	8003516 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ef      	beq.n	80034f6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000

08003538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e095      	b.n	8003676 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d009      	beq.n	8003570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
 8003562:	e005      	b.n	8003570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fe34 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b0:	d902      	bls.n	80035b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e002      	b.n	80035be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035c6:	d007      	beq.n	80035d8 <HAL_SPI_Init+0xa0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	ea42 0103 	orr.w	r1, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	f003 0204 	and.w	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003654:	ea42 0103 	orr.w	r1, r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e040      	b.n	8003712 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fd fd49 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2224      	movs	r2, #36	; 0x24
 80036aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f82d 	bl	800371c <UART_SetConfig>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e022      	b.n	8003712 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fad9 	bl	8003c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb60 	bl	8003dd0 <UART_CheckIdleState>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b08a      	sub	sp, #40	; 0x28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4ba4      	ldr	r3, [pc, #656]	; (80039dc <UART_SetConfig+0x2c0>)
 800374c:	4013      	ands	r3, r2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003754:	430b      	orrs	r3, r1
 8003756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a99      	ldr	r2, [pc, #612]	; (80039e0 <UART_SetConfig+0x2c4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	4313      	orrs	r3, r2
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a90      	ldr	r2, [pc, #576]	; (80039e4 <UART_SetConfig+0x2c8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d126      	bne.n	80037f4 <UART_SetConfig+0xd8>
 80037a6:	4b90      	ldr	r3, [pc, #576]	; (80039e8 <UART_SetConfig+0x2cc>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d81b      	bhi.n	80037ec <UART_SetConfig+0xd0>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0xa0>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e116      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e112      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e10e      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e10a      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e106      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7c      	ldr	r2, [pc, #496]	; (80039ec <UART_SetConfig+0x2d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d138      	bne.n	8003870 <UART_SetConfig+0x154>
 80037fe:	4b7a      	ldr	r3, [pc, #488]	; (80039e8 <UART_SetConfig+0x2cc>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d82d      	bhi.n	8003868 <UART_SetConfig+0x14c>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0xf8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003849 	.word	0x08003849
 8003818:	08003869 	.word	0x08003869
 800381c:	08003869 	.word	0x08003869
 8003820:	08003869 	.word	0x08003869
 8003824:	08003859 	.word	0x08003859
 8003828:	08003869 	.word	0x08003869
 800382c:	08003869 	.word	0x08003869
 8003830:	08003869 	.word	0x08003869
 8003834:	08003851 	.word	0x08003851
 8003838:	08003869 	.word	0x08003869
 800383c:	08003869 	.word	0x08003869
 8003840:	08003869 	.word	0x08003869
 8003844:	08003861 	.word	0x08003861
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e0d8      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e0d4      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e0d0      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e0cc      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e0c8      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5e      	ldr	r2, [pc, #376]	; (80039f0 <UART_SetConfig+0x2d4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d125      	bne.n	80038c6 <UART_SetConfig+0x1aa>
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <UART_SetConfig+0x2cc>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d016      	beq.n	80038b6 <UART_SetConfig+0x19a>
 8003888:	2b30      	cmp	r3, #48	; 0x30
 800388a:	d818      	bhi.n	80038be <UART_SetConfig+0x1a2>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d00a      	beq.n	80038a6 <UART_SetConfig+0x18a>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d814      	bhi.n	80038be <UART_SetConfig+0x1a2>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <UART_SetConfig+0x182>
 8003898:	2b10      	cmp	r3, #16
 800389a:	d008      	beq.n	80038ae <UART_SetConfig+0x192>
 800389c:	e00f      	b.n	80038be <UART_SetConfig+0x1a2>
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e0ad      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038a6:	2302      	movs	r3, #2
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ac:	e0a9      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038ae:	2304      	movs	r3, #4
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b4:	e0a5      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038b6:	2308      	movs	r3, #8
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038bc:	e0a1      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038be:	2310      	movs	r3, #16
 80038c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c4:	e09d      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <UART_SetConfig+0x2d8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d125      	bne.n	800391c <UART_SetConfig+0x200>
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <UART_SetConfig+0x2cc>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038da:	2bc0      	cmp	r3, #192	; 0xc0
 80038dc:	d016      	beq.n	800390c <UART_SetConfig+0x1f0>
 80038de:	2bc0      	cmp	r3, #192	; 0xc0
 80038e0:	d818      	bhi.n	8003914 <UART_SetConfig+0x1f8>
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d00a      	beq.n	80038fc <UART_SetConfig+0x1e0>
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d814      	bhi.n	8003914 <UART_SetConfig+0x1f8>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <UART_SetConfig+0x1d8>
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d008      	beq.n	8003904 <UART_SetConfig+0x1e8>
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x1f8>
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e082      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e07e      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003904:	2304      	movs	r3, #4
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e07a      	b.n	8003a02 <UART_SetConfig+0x2e6>
 800390c:	2308      	movs	r3, #8
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e076      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003914:	2310      	movs	r3, #16
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e072      	b.n	8003a02 <UART_SetConfig+0x2e6>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a35      	ldr	r2, [pc, #212]	; (80039f8 <UART_SetConfig+0x2dc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12a      	bne.n	800397c <UART_SetConfig+0x260>
 8003926:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <UART_SetConfig+0x2cc>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003934:	d01a      	beq.n	800396c <UART_SetConfig+0x250>
 8003936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393a:	d81b      	bhi.n	8003974 <UART_SetConfig+0x258>
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d00c      	beq.n	800395c <UART_SetConfig+0x240>
 8003942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003946:	d815      	bhi.n	8003974 <UART_SetConfig+0x258>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <UART_SetConfig+0x238>
 800394c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003950:	d008      	beq.n	8003964 <UART_SetConfig+0x248>
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x258>
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e052      	b.n	8003a02 <UART_SetConfig+0x2e6>
 800395c:	2302      	movs	r3, #2
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e04e      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003964:	2304      	movs	r3, #4
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e04a      	b.n	8003a02 <UART_SetConfig+0x2e6>
 800396c:	2308      	movs	r3, #8
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e046      	b.n	8003a02 <UART_SetConfig+0x2e6>
 8003974:	2310      	movs	r3, #16
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e042      	b.n	8003a02 <UART_SetConfig+0x2e6>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <UART_SetConfig+0x2c4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d13a      	bne.n	80039fc <UART_SetConfig+0x2e0>
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <UART_SetConfig+0x2cc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003994:	d01a      	beq.n	80039cc <UART_SetConfig+0x2b0>
 8003996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800399a:	d81b      	bhi.n	80039d4 <UART_SetConfig+0x2b8>
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d00c      	beq.n	80039bc <UART_SetConfig+0x2a0>
 80039a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a6:	d815      	bhi.n	80039d4 <UART_SetConfig+0x2b8>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <UART_SetConfig+0x298>
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b0:	d008      	beq.n	80039c4 <UART_SetConfig+0x2a8>
 80039b2:	e00f      	b.n	80039d4 <UART_SetConfig+0x2b8>
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e022      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e01e      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e01a      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e016      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e012      	b.n	8003a02 <UART_SetConfig+0x2e6>
 80039dc:	efff69f3 	.word	0xefff69f3
 80039e0:	40008000 	.word	0x40008000
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40004400 	.word	0x40004400
 80039f0:	40004800 	.word	0x40004800
 80039f4:	40004c00 	.word	0x40004c00
 80039f8:	40005000 	.word	0x40005000
 80039fc:	2310      	movs	r3, #16
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a9f      	ldr	r2, [pc, #636]	; (8003c84 <UART_SetConfig+0x568>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d17a      	bne.n	8003b02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d824      	bhi.n	8003a5e <UART_SetConfig+0x342>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x300>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a4f 	.word	0x08003a4f
 8003a30:	08003a5f 	.word	0x08003a5f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a5f 	.word	0x08003a5f
 8003a3c:	08003a57 	.word	0x08003a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7ff f814 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003a44:	61f8      	str	r0, [r7, #28]
        break;
 8003a46:	e010      	b.n	8003a6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a48:	4b8f      	ldr	r3, [pc, #572]	; (8003c88 <UART_SetConfig+0x56c>)
 8003a4a:	61fb      	str	r3, [r7, #28]
        break;
 8003a4c:	e00d      	b.n	8003a6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7fe ff75 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003a52:	61f8      	str	r0, [r7, #28]
        break;
 8003a54:	e009      	b.n	8003a6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	61fb      	str	r3, [r7, #28]
        break;
 8003a5c:	e005      	b.n	8003a6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80fb 	beq.w	8003c68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d305      	bcc.n	8003a8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d903      	bls.n	8003a96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a94:	e0e8      	b.n	8003c68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	461c      	mov	r4, r3
 8003a9c:	4615      	mov	r5, r2
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	022b      	lsls	r3, r5, #8
 8003aa8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aac:	0222      	lsls	r2, r4, #8
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	6849      	ldr	r1, [r1, #4]
 8003ab2:	0849      	lsrs	r1, r1, #1
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	4688      	mov	r8, r1
 8003ab8:	4681      	mov	r9, r0
 8003aba:	eb12 0a08 	adds.w	sl, r2, r8
 8003abe:	eb43 0b09 	adc.w	fp, r3, r9
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	4659      	mov	r1, fp
 8003ad4:	f7fc fb8a 	bl	80001ec <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d308      	bcc.n	8003afa <UART_SetConfig+0x3de>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aee:	d204      	bcs.n	8003afa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e0b6      	b.n	8003c68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b00:	e0b2      	b.n	8003c68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d15e      	bne.n	8003bca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d828      	bhi.n	8003b66 <UART_SetConfig+0x44a>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x400>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b67 	.word	0x08003b67
 8003b2c:	08003b57 	.word	0x08003b57
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003b67 	.word	0x08003b67
 8003b3c:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7fe ff94 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003b44:	61f8      	str	r0, [r7, #28]
        break;
 8003b46:	e014      	b.n	8003b72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe ffa6 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	61f8      	str	r0, [r7, #28]
        break;
 8003b4e:	e010      	b.n	8003b72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <UART_SetConfig+0x56c>)
 8003b52:	61fb      	str	r3, [r7, #28]
        break;
 8003b54:	e00d      	b.n	8003b72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7fe fef1 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003b5a:	61f8      	str	r0, [r7, #28]
        break;
 8003b5c:	e009      	b.n	8003b72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b62:	61fb      	str	r3, [r7, #28]
        break;
 8003b64:	e005      	b.n	8003b72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d077      	beq.n	8003c68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005a      	lsls	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	441a      	add	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d916      	bls.n	8003bc2 <UART_SetConfig+0x4a6>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d212      	bcs.n	8003bc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f023 030f 	bic.w	r3, r3, #15
 8003ba4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	8afb      	ldrh	r3, [r7, #22]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	8afa      	ldrh	r2, [r7, #22]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e052      	b.n	8003c68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bc8:	e04e      	b.n	8003c68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d827      	bhi.n	8003c22 <UART_SetConfig+0x506>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x4bc>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c23 	.word	0x08003c23
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003c23 	.word	0x08003c23
 8003bf4:	08003c23 	.word	0x08003c23
 8003bf8:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe ff36 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e014      	b.n	8003c2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe ff48 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e010      	b.n	8003c2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <UART_SetConfig+0x56c>)
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e00d      	b.n	8003c2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe fe93 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e009      	b.n	8003c2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e005      	b.n	8003c2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c2c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d019      	beq.n	8003c68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	085a      	lsrs	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d909      	bls.n	8003c62 <UART_SetConfig+0x546>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d205      	bcs.n	8003c62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e002      	b.n	8003c68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c82:	bf00      	nop
 8003c84:	40008000 	.word	0x40008000
 8003c88:	00f42400 	.word	0x00f42400

08003c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8a:	d10a      	bne.n	8003da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de0:	f7fd fbf6 	bl	80015d0 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d10e      	bne.n	8003e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f82d 	bl	8003e62 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e023      	b.n	8003e5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d10e      	bne.n	8003e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f817 	bl	8003e62 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e00d      	b.n	8003e5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b09c      	sub	sp, #112	; 0x70
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e72:	e0a5      	b.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	f000 80a1 	beq.w	8003fc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fd fba7 	bl	80015d0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d13e      	bne.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ee6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e067      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04f      	beq.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d147      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3308      	adds	r3, #8
 8003f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f8c:	623a      	str	r2, [r7, #32]
 8003f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	69f9      	ldr	r1, [r7, #28]
 8003f92:	6a3a      	ldr	r2, [r7, #32]
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e010      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	f43f af4a 	beq.w	8003e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3770      	adds	r7, #112	; 0x70
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fea:	b084      	sub	sp, #16
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	f107 001c 	add.w	r0, r7, #28
 8003ff8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fa6f 	bl	80044ec <USB_CoreReset>
 800400e:	4603      	mov	r3, r0
 8004010:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
 8004024:	e005      	b.n	8004032 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800403e:	b004      	add	sp, #16
 8004040:	4770      	bx	lr

08004042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d115      	bne.n	80040b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004092:	2001      	movs	r0, #1
 8004094:	f7fd faa8 	bl	80015e8 <HAL_Delay>
      ms++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa16 	bl	80044d0 <USB_GetMode>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d01e      	beq.n	80040e8 <USB_SetCurrentMode+0x84>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b31      	cmp	r3, #49	; 0x31
 80040ae:	d9f0      	bls.n	8004092 <USB_SetCurrentMode+0x2e>
 80040b0:	e01a      	b.n	80040e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d115      	bne.n	80040e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040c4:	2001      	movs	r0, #1
 80040c6:	f7fd fa8f 	bl	80015e8 <HAL_Delay>
      ms++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9fd 	bl	80044d0 <USB_GetMode>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <USB_SetCurrentMode+0x84>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b31      	cmp	r3, #49	; 0x31
 80040e0:	d9f0      	bls.n	80040c4 <USB_SetCurrentMode+0x60>
 80040e2:	e001      	b.n	80040e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e005      	b.n	80040f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b32      	cmp	r3, #50	; 0x32
 80040ec:	d101      	bne.n	80040f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040fc:	b084      	sub	sp, #16
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800410a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e009      	b.n	8004130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3340      	adds	r3, #64	; 0x40
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	2200      	movs	r2, #0
 8004128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3301      	adds	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b0e      	cmp	r3, #14
 8004134:	d9f2      	bls.n	800411c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11c      	bne.n	8004176 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e005      	b.n	8004182 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004188:	461a      	mov	r2, r3
 800418a:	2300      	movs	r3, #0
 800418c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	4619      	mov	r1, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	461a      	mov	r2, r3
 800419e:	680b      	ldr	r3, [r1, #0]
 80041a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041a2:	2103      	movs	r1, #3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f959 	bl	800445c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041aa:	2110      	movs	r1, #16
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8f1 	bl	8004394 <USB_FlushTxFifo>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f91d 	bl	80043fc <USB_FlushRxFifo>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	461a      	mov	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e043      	b.n	800427e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420c:	d118      	bne.n	8004240 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	461a      	mov	r2, r3
 8004222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e013      	b.n	8004252 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	461a      	mov	r2, r3
 8004238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e008      	b.n	8004252 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	2300      	movs	r3, #0
 8004250:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	d3b7      	bcc.n	80041f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e043      	b.n	8004314 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800429e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a2:	d118      	bne.n	80042d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	461a      	mov	r2, r3
 80042b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e013      	b.n	80042e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e008      	b.n	80042e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800430c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3301      	adds	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	429a      	cmp	r2, r3
 800431a:	d3b7      	bcc.n	800428c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800432e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800433c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <USB_DevInit+0x294>)
 8004350:	4313      	orrs	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 0208 	orr.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800437e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800438a:	b004      	add	sp, #16
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	803c3800 	.word	0x803c3800

08004394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <USB_FlushTxFifo+0x64>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e01b      	b.n	80043ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	daf2      	bge.n	80043a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <USB_FlushTxFifo+0x64>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e006      	b.n	80043ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d0f0      	beq.n	80043cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	00030d40 	.word	0x00030d40

080043fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <USB_FlushRxFifo+0x5c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e018      	b.n	800444c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	daf2      	bge.n	8004408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2210      	movs	r2, #16
 800442a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a08      	ldr	r2, [pc, #32]	; (8004458 <USB_FlushRxFifo+0x5c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e006      	b.n	800444c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d0f0      	beq.n	800442c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	00030d40 	.word	0x00030d40

0800445c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044a8:	f023 0303 	bic.w	r3, r3, #3
 80044ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0301 	and.w	r3, r3, #1
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <USB_CoreReset+0x64>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e01b      	b.n	8004542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	daf2      	bge.n	80044f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3301      	adds	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <USB_CoreReset+0x64>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e006      	b.n	8004542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d0f0      	beq.n	8004522 <USB_CoreReset+0x36>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	00030d40 	.word	0x00030d40

08004554 <UnityBegin>:
    Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <UnityBegin+0x50>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <UnityBegin+0x50>)
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <UnityBegin+0x50>)
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <UnityBegin+0x50>)
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <UnityBegin+0x50>)
 8004576:	2200      	movs	r2, #0
 8004578:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <UnityBegin+0x50>)
 800457c:	2200      	movs	r2, #0
 800457e:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <UnityBegin+0x50>)
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <UnityBegin+0x50>)
 8004588:	2200      	movs	r2, #0
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <UnityBegin+0x50>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <UnityBegin+0x50>)
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	2000062c 	.word	0x2000062c

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4d0d      	ldr	r5, [pc, #52]	; (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1b64      	subs	r4, r4, r5
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2600      	movs	r6, #0
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4d0b      	ldr	r5, [pc, #44]	; (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	; (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 f820 	bl	8004600 <_init>
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2600      	movs	r6, #0
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	0800467c 	.word	0x0800467c
 80045e4:	0800467c 	.word	0x0800467c
 80045e8:	0800467c 	.word	0x0800467c
 80045ec:	08004680 	.word	0x08004680

080045f0 <memset>:
 80045f0:	4402      	add	r2, r0
 80045f2:	4603      	mov	r3, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d100      	bne.n	80045fa <memset+0xa>
 80045f8:	4770      	bx	lr
 80045fa:	f803 1b01 	strb.w	r1, [r3], #1
 80045fe:	e7f9      	b.n	80045f4 <memset+0x4>

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
